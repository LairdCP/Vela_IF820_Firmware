{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run UART programmer no chip erase",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/ifx_uart_programmer.py",
                "-c",
                "${config:hci_port_IF820_device1}",
                "-b",
                "${config:default_baud}",
                "-m",
                "${config:mini_driver}",
                "-f",
                "${config:ezserial_firmware}",
            ],
            "problemMatcher": []
        },
        {
            "label": "Run UART programmer with chip erase",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/ifx_uart_programmer.py",
                "-c",
                "${config:hci_port_IF820_device1}",
                "-b",
                "${config:default_baud}",
                "-m",
                "${config:mini_driver}",
                "-f",
                "${config:ezserial_firmware}",
                "-ce"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run chip erase",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/ifx_uart_programmer.py",
                "-c",
                "${config:hci_port_IF820_device1}",
                "-b",
                "${config:default_baud}",
                "-m",
                "${config:mini_driver}",
                "-ce"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run BLE Sample",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/sample_${input:ble_sample}.py",
                "-p",
                "${config:comport_IF820_device2}",
                "-c",
                "${config:comport_IF820_device1}",
            ],
            "problemMatcher": []
        },
        {
            "label": "Run CYSPP IF820->IF820",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/sample_cyspp_IF820-IF820.py",
                "-cp",
                "${config:comport_IF820_device1}",
                "-cc",
                "${config:comport_IF820_device2}",
                "-ppp",
                "${config:id_pico_probe_device1}",
                "-ppc",
                "${config:id_pico_probe_device2}",
                "-d"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run CYSPP BT900 -> IF820",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/sample_cyspp_BT900-IF820.py",
                "-cp",
                "${config:comport_IF820_device1}",
                "-cc",
                "${config:comport_BT900_device1}",
                "-ppc",
                "${config:id_pico_probe_device1}",
                "-d"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run CYSPP IF820 -> BT900",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/sample_cyspp_IF820-BT900.py",
                "-cp",
                "${config:comport_BT900_device1}",
                "-cc",
                "${config:comport_IF820_device1}",
                "-ppc",
                "${config:id_pico_probe_device1}",
                "-d"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run SPP IF820->IF820",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/sample_spp_IF820-IF820.py",
                "-cp",
                "${config:comport_IF820_device1}",
                "-cc",
                "${config:comport_IF820_device2}",
                "-ppp",
                "${config:id_pico_probe_device1}",
                "-ppc",
                "${config:id_pico_probe_device2}",
                "-d"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run SPP IF820 -> BT900",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/sample_spp_IF820-BT900.py",
                "-cp",
                "${config:comport_BT900_device1}",
                "-cc",
                "${config:comport_IF820_device1}",
                "-ppc",
                "${config:id_pico_probe_device1}",
                "-d"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run SPP BT900 -> IF820",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/sample_spp_BT900-IF820.py",
                "-cp",
                "${config:comport_IF820_device1}",
                "-cc",
                "${config:comport_BT900_device1}",
                "-ppc",
                "${config:id_pico_probe_device1}",
                "-d"
            ],
            "problemMatcher": []
        },
        {
            "label": "Ping",
            "type": "shell",
            "command": "python3",
            "args": [
                "${workspaceFolder}/sample_ping.py",
                "-c",
                "${config:comport_IF820_device1}"
            ],
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "ble_sample",
            "description": "The name of the BLE sample to run",
            "type": "pickString",
            "options": [
                "advertiser",
                "custom_gatt",
                "advertiser_tx_power",
            ],
            "default": "advertiser",
        },
    ]
}
