/*******************************************************************************
* \file EZSLib.h
* \version 1.1.0
* \owner JROW
*
* \brief
* EZ-Serial host API protocol declarations for Arduino platform
*
* \details
* This file is part of the EZ-Serial host API protocol reference library. It
* provides definitions for the API protocol used to control EZ-Serial from an
* external host. Refer to the EZ-Serial Firmware User Guide for additional
* information concerning the API protocol and communication behavior.
*
* This implementation is specifically suited for the Arduino environment.
*
* Code Tested With:
* 1. Arduino 1.8.2 + Arduino Uno R3
*
********************************************************************************
* \copyright
* Copyright 2017, Cypress Semiconductor Corporation.
*
* This software is owned by Cypress Semiconductor Corporation (Cypress) and is
* protected by and subject to worldwide patent protection (United States and
* foreign), United States copyright laws and international treaty provisions.
* Cypress hereby grants to licensee a personal, non-exclusive, non-transferable
* license to copy, use, modify, create derivative works of, and compile the
* Cypress Source Code and derivative works for the sole purpose of creating
* custom software in support of licensee product to be used only in conjunction
* with a Cypress integrated circuit as specified in the applicable agreement.
* Any reproduction, modification, translation, compilation, or representation of
* this software except as specified above is prohibited without the express
* written permission of Cypress.
*
* Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH
* REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
* Cypress reserves the right to make changes without further notice to the
* materials described herein. Cypress does not assume any liability arising out
* of the application or use of any product or circuit described herein. Cypress
* does not authorize its products for use as critical components in life-support
* systems where a malfunction or failure may reasonably be expected to result in
* significant injury to the user. The inclusion of Cypress' product in a life-
* support systems application implies that the manufacturer assumes all risk of
* such use and in doing so indemnifies Cypress against all charges. Use may be
* limited by and subject to the applicable Cypress software license agreement.
*******************************************************************************/

/* THIS FILE IS AUTOMATICALLY GENERATED FROM THE EZ-SERIAL JSON API DEFINITION */

#ifndef EZSLIB_H
#define EZSLIB_H

/* structure packing/alignment for proper mapping onto packet byte stream buffers */
#define __PACKDEF(STRUCTNAME, STRUCTDEF) typedef struct STRUCTDEF __attribute__((__packed__, gcc_struct)) STRUCTNAME

#define EZS_SEND_AND_WAIT(CMD, TIMEOUT) \
    (((ezs_err_t)CMD != EZS_ERR_SUCCESS) ? 0 : EZS_WAIT_FOR_RESPONSE(TIMEOUT))

#define EZS_WAIT_FOR_PACKET(TIMEOUT) \
    EZSerial_WaitForPacket(EZS_PACKET_TYPE_ANY, TIMEOUT)

#define EZS_WAIT_FOR_RESPONSE(TIMEOUT) \
    EZSerial_WaitForPacket(EZS_PACKET_TYPE_RESPONSE, TIMEOUT)

#define EZS_WAIT_FOR_EVENT(TIMEOUT) \
    EZSerial_WaitForPacket(EZS_PACKET_TYPE_EVENT, TIMEOUT)

#define EZS_CHECK_FOR_PACKET()                  EZS_WAIT_FOR_PACKET(0)

/* if your application does not require large packets, you can decrease
 * these values to save SRAM on your host platform if needed; many projects
 * do not require anything larger than 64 bytes for any single long/uint8a
 */
#define EZS_UINT8A_ACTUAL_MAX                                   (255u)
#define EZS_LONGUINT8A_ACTUAL_MAX                               (512u)

/* basic mechanical concepts behind this implementation may be found here:
 * http://stackoverflow.com/questions/4274055
 */

#define EZS_COMMAND_SCOPE_RAM                                   (0x00)
#define EZS_COMMAND_SCOPE_FLASH                                 (0x10)

#define EZS_BINARY_SOF_MASK                                     (0x80u)
#define EZS_BINARY_TYPE_MASK                                    (0xC0u)
#define EZS_BINARY_TYPE_CMDRSP                                  (0xC0u)
#define EZS_BINARY_TYPE_EVENT                                   (0x80u)
#define EZS_BINARY_CHECKSUM_INITIAL_VALUE                       (0x99u)
#define EZS_BINARY_HEADER_LENGTH_BYTES                          (4u)
#define EZS_BINARY_LENGTH_MSB_MASK                              (0x07u)
#define EZS_BINARY_LENGTH_MSB_WIDTH_BITS                        (3u)
#define EZS_BINARY_MAX_POSSIBLE_PAYLOAD_LENGTH                  ((1 << 11) - 1)

#define EZS_BINARY_COMMAND_SCOPE_MASK							(0x30u)
#define EZS_BINARY_COMMAND_SCOPE_RAM                            (0x00u)
#define EZS_BINARY_COMMAND_SCOPE_FLASH                          (0x10u)

#define EZS_TBL_ENTRY_COMMAND_VARLENGTH_MASK                    (0x80)
#define EZS_TBL_ENTRY_COMMAND_LENGTH_BYTES_MIN                  (4u)
#define EZS_TBL_ENTRY_EVENT_LENGTH_BYTES                        (3u)

#define T_U8    EZS_ARGTYPE_UINT8
#define T_S8    EZS_ARGTYPE_INT8
#define T_U16   EZS_ARGTYPE_UINT16
#define T_S16   EZS_ARGTYPE_INT16
#define T_U32   EZS_ARGTYPE_UINT32
#define T_S32   EZS_ARGTYPE_INT32
#define T_U8A   EZS_ARGTYPE_UINT8A
#define T_STR   EZS_ARGTYPE_STRING
#define T_LU8A  EZS_ARGTYPE_LONGUINT8A
#define T_LSTR  EZS_ARGTYPE_LONGSTRING
#define T_MAC   EZS_ARGTYPE_MACADDR

#define EZS_IDX_RSP_PROTOCOL_SET_PARSE_MODE                     EZS_IDX_CMD_PROTOCOL_SET_PARSE_MODE
#define EZS_IDX_RSP_PROTOCOL_GET_PARSE_MODE                     EZS_IDX_CMD_PROTOCOL_GET_PARSE_MODE
#define EZS_IDX_RSP_PROTOCOL_SET_ECHO_MODE                      EZS_IDX_CMD_PROTOCOL_SET_ECHO_MODE
#define EZS_IDX_RSP_PROTOCOL_GET_ECHO_MODE                      EZS_IDX_CMD_PROTOCOL_GET_ECHO_MODE
#define EZS_IDX_RSP_SYSTEM_PING                                 EZS_IDX_CMD_SYSTEM_PING
#define EZS_IDX_RSP_SYSTEM_REBOOT                               EZS_IDX_CMD_SYSTEM_REBOOT
#define EZS_IDX_RSP_SYSTEM_DUMP                                 EZS_IDX_CMD_SYSTEM_DUMP
#define EZS_IDX_RSP_SYSTEM_STORE_CONFIG                         EZS_IDX_CMD_SYSTEM_STORE_CONFIG
#define EZS_IDX_RSP_SYSTEM_FACTORY_RESET                        EZS_IDX_CMD_SYSTEM_FACTORY_RESET
#define EZS_IDX_RSP_SYSTEM_QUERY_FIRMWARE_VERSION               EZS_IDX_CMD_SYSTEM_QUERY_FIRMWARE_VERSION
#define EZS_IDX_RSP_SYSTEM_QUERY_UNIQUE_ID                      EZS_IDX_CMD_SYSTEM_QUERY_UNIQUE_ID
#define EZS_IDX_RSP_SYSTEM_QUERY_RANDOM_NUMBER                  EZS_IDX_CMD_SYSTEM_QUERY_RANDOM_NUMBER
#define EZS_IDX_RSP_SYSTEM_AES_ENCRYPT                          EZS_IDX_CMD_SYSTEM_AES_ENCRYPT
#define EZS_IDX_RSP_SYSTEM_AES_DECRYPT                          EZS_IDX_CMD_SYSTEM_AES_DECRYPT
#define EZS_IDX_RSP_SYSTEM_WRITE_USER_DATA                      EZS_IDX_CMD_SYSTEM_WRITE_USER_DATA
#define EZS_IDX_RSP_SYSTEM_READ_USER_DATA                       EZS_IDX_CMD_SYSTEM_READ_USER_DATA
#define EZS_IDX_RSP_SYSTEM_SET_BLUETOOTH_ADDRESS                EZS_IDX_CMD_SYSTEM_SET_BLUETOOTH_ADDRESS
#define EZS_IDX_RSP_SYSTEM_GET_BLUETOOTH_ADDRESS                EZS_IDX_CMD_SYSTEM_GET_BLUETOOTH_ADDRESS
#define EZS_IDX_RSP_SYSTEM_SET_ECO_PARAMETERS                   EZS_IDX_CMD_SYSTEM_SET_ECO_PARAMETERS
#define EZS_IDX_RSP_SYSTEM_GET_ECO_PARAMETERS                   EZS_IDX_CMD_SYSTEM_GET_ECO_PARAMETERS
#define EZS_IDX_RSP_SYSTEM_SET_WCO_PARAMETERS                   EZS_IDX_CMD_SYSTEM_SET_WCO_PARAMETERS
#define EZS_IDX_RSP_SYSTEM_GET_WCO_PARAMETERS                   EZS_IDX_CMD_SYSTEM_GET_WCO_PARAMETERS
#define EZS_IDX_RSP_SYSTEM_SET_SLEEP_PARAMETERS                 EZS_IDX_CMD_SYSTEM_SET_SLEEP_PARAMETERS
#define EZS_IDX_RSP_SYSTEM_GET_SLEEP_PARAMETERS                 EZS_IDX_CMD_SYSTEM_GET_SLEEP_PARAMETERS
#define EZS_IDX_RSP_SYSTEM_SET_TX_POWER                         EZS_IDX_CMD_SYSTEM_SET_TX_POWER
#define EZS_IDX_RSP_SYSTEM_GET_TX_POWER                         EZS_IDX_CMD_SYSTEM_GET_TX_POWER
#define EZS_IDX_RSP_SYSTEM_SET_TRANSPORT                        EZS_IDX_CMD_SYSTEM_SET_TRANSPORT
#define EZS_IDX_RSP_SYSTEM_GET_TRANSPORT                        EZS_IDX_CMD_SYSTEM_GET_TRANSPORT
#define EZS_IDX_RSP_SYSTEM_SET_UART_PARAMETERS                  EZS_IDX_CMD_SYSTEM_SET_UART_PARAMETERS
#define EZS_IDX_RSP_SYSTEM_GET_UART_PARAMETERS                  EZS_IDX_CMD_SYSTEM_GET_UART_PARAMETERS
#define EZS_IDX_RSP_DFU_REBOOT                                  EZS_IDX_CMD_DFU_REBOOT
#define EZS_IDX_RSP_GAP_CONNECT                                 EZS_IDX_CMD_GAP_CONNECT
#define EZS_IDX_RSP_GAP_CANCEL_CONNECTION                       EZS_IDX_CMD_GAP_CANCEL_CONNECTION
#define EZS_IDX_RSP_GAP_UPDATE_CONN_PARAMETERS                  EZS_IDX_CMD_GAP_UPDATE_CONN_PARAMETERS
#define EZS_IDX_RSP_GAP_SEND_CONNUPDATE_RESPONSE                EZS_IDX_CMD_GAP_SEND_CONNUPDATE_RESPONSE
#define EZS_IDX_RSP_GAP_DISCONNECT                              EZS_IDX_CMD_GAP_DISCONNECT
#define EZS_IDX_RSP_GAP_ADD_WHITELIST_ENTRY                     EZS_IDX_CMD_GAP_ADD_WHITELIST_ENTRY
#define EZS_IDX_RSP_GAP_DELETE_WHITELIST_ENTRY                  EZS_IDX_CMD_GAP_DELETE_WHITELIST_ENTRY
#define EZS_IDX_RSP_GAP_START_ADV                               EZS_IDX_CMD_GAP_START_ADV
#define EZS_IDX_RSP_GAP_STOP_ADV                                EZS_IDX_CMD_GAP_STOP_ADV
#define EZS_IDX_RSP_GAP_START_SCAN                              EZS_IDX_CMD_GAP_START_SCAN
#define EZS_IDX_RSP_GAP_STOP_SCAN                               EZS_IDX_CMD_GAP_STOP_SCAN
#define EZS_IDX_RSP_GAP_QUERY_PEER_ADDRESS                      EZS_IDX_CMD_GAP_QUERY_PEER_ADDRESS
#define EZS_IDX_RSP_GAP_QUERY_RSSI                              EZS_IDX_CMD_GAP_QUERY_RSSI
#define EZS_IDX_RSP_GAP_QUERY_WHITELIST                         EZS_IDX_CMD_GAP_QUERY_WHITELIST
#define EZS_IDX_RSP_GAP_SET_DEVICE_NAME                         EZS_IDX_CMD_GAP_SET_DEVICE_NAME
#define EZS_IDX_RSP_GAP_GET_DEVICE_NAME                         EZS_IDX_CMD_GAP_GET_DEVICE_NAME
#define EZS_IDX_RSP_GAP_SET_DEVICE_APPEARANCE                   EZS_IDX_CMD_GAP_SET_DEVICE_APPEARANCE
#define EZS_IDX_RSP_GAP_GET_DEVICE_APPEARANCE                   EZS_IDX_CMD_GAP_GET_DEVICE_APPEARANCE
#define EZS_IDX_RSP_GAP_SET_ADV_DATA                            EZS_IDX_CMD_GAP_SET_ADV_DATA
#define EZS_IDX_RSP_GAP_GET_ADV_DATA                            EZS_IDX_CMD_GAP_GET_ADV_DATA
#define EZS_IDX_RSP_GAP_SET_SR_DATA                             EZS_IDX_CMD_GAP_SET_SR_DATA
#define EZS_IDX_RSP_GAP_GET_SR_DATA                             EZS_IDX_CMD_GAP_GET_SR_DATA
#define EZS_IDX_RSP_GAP_SET_ADV_PARAMETERS                      EZS_IDX_CMD_GAP_SET_ADV_PARAMETERS
#define EZS_IDX_RSP_GAP_GET_ADV_PARAMETERS                      EZS_IDX_CMD_GAP_GET_ADV_PARAMETERS
#define EZS_IDX_RSP_GAP_SET_SCAN_PARAMETERS                     EZS_IDX_CMD_GAP_SET_SCAN_PARAMETERS
#define EZS_IDX_RSP_GAP_GET_SCAN_PARAMETERS                     EZS_IDX_CMD_GAP_GET_SCAN_PARAMETERS
#define EZS_IDX_RSP_GAP_SET_CONN_PARAMETERS                     EZS_IDX_CMD_GAP_SET_CONN_PARAMETERS
#define EZS_IDX_RSP_GAP_GET_CONN_PARAMETERS                     EZS_IDX_CMD_GAP_GET_CONN_PARAMETERS
#define EZS_IDX_RSP_GATTS_CREATE_ATTR                           EZS_IDX_CMD_GATTS_CREATE_ATTR
#define EZS_IDX_RSP_GATTS_DELETE_ATTR                           EZS_IDX_CMD_GATTS_DELETE_ATTR
#define EZS_IDX_RSP_GATTS_VALIDATE_DB                           EZS_IDX_CMD_GATTS_VALIDATE_DB
#define EZS_IDX_RSP_GATTS_STORE_DB                              EZS_IDX_CMD_GATTS_STORE_DB
#define EZS_IDX_RSP_GATTS_DUMP_DB                               EZS_IDX_CMD_GATTS_DUMP_DB
#define EZS_IDX_RSP_GATTS_DISCOVER_SERVICES                     EZS_IDX_CMD_GATTS_DISCOVER_SERVICES
#define EZS_IDX_RSP_GATTS_DISCOVER_CHARACTERISTICS              EZS_IDX_CMD_GATTS_DISCOVER_CHARACTERISTICS
#define EZS_IDX_RSP_GATTS_DISCOVER_DESCRIPTORS                  EZS_IDX_CMD_GATTS_DISCOVER_DESCRIPTORS
#define EZS_IDX_RSP_GATTS_READ_HANDLE                           EZS_IDX_CMD_GATTS_READ_HANDLE
#define EZS_IDX_RSP_GATTS_WRITE_HANDLE                          EZS_IDX_CMD_GATTS_WRITE_HANDLE
#define EZS_IDX_RSP_GATTS_NOTIFY_HANDLE                         EZS_IDX_CMD_GATTS_NOTIFY_HANDLE
#define EZS_IDX_RSP_GATTS_INDICATE_HANDLE                       EZS_IDX_CMD_GATTS_INDICATE_HANDLE
#define EZS_IDX_RSP_GATTS_SEND_WRITEREQ_RESPONSE                EZS_IDX_CMD_GATTS_SEND_WRITEREQ_RESPONSE
#define EZS_IDX_RSP_GATTS_SET_PARAMETERS                        EZS_IDX_CMD_GATTS_SET_PARAMETERS
#define EZS_IDX_RSP_GATTS_GET_PARAMETERS                        EZS_IDX_CMD_GATTS_GET_PARAMETERS
#define EZS_IDX_RSP_GATTC_DISCOVER_SERVICES                     EZS_IDX_CMD_GATTC_DISCOVER_SERVICES
#define EZS_IDX_RSP_GATTC_DISCOVER_CHARACTERISTICS              EZS_IDX_CMD_GATTC_DISCOVER_CHARACTERISTICS
#define EZS_IDX_RSP_GATTC_DISCOVER_DESCRIPTORS                  EZS_IDX_CMD_GATTC_DISCOVER_DESCRIPTORS
#define EZS_IDX_RSP_GATTC_READ_HANDLE                           EZS_IDX_CMD_GATTC_READ_HANDLE
#define EZS_IDX_RSP_GATTC_WRITE_HANDLE                          EZS_IDX_CMD_GATTC_WRITE_HANDLE
#define EZS_IDX_RSP_GATTC_CONFIRM_INDICATION                    EZS_IDX_CMD_GATTC_CONFIRM_INDICATION
#define EZS_IDX_RSP_GATTC_SET_PARAMETERS                        EZS_IDX_CMD_GATTC_SET_PARAMETERS
#define EZS_IDX_RSP_GATTC_GET_PARAMETERS                        EZS_IDX_CMD_GATTC_GET_PARAMETERS
#define EZS_IDX_RSP_SMP_QUERY_BONDS                             EZS_IDX_CMD_SMP_QUERY_BONDS
#define EZS_IDX_RSP_SMP_DELETE_BOND                             EZS_IDX_CMD_SMP_DELETE_BOND
#define EZS_IDX_RSP_SMP_PAIR                                    EZS_IDX_CMD_SMP_PAIR
#define EZS_IDX_RSP_SMP_QUERY_RANDOM_ADDRESS                    EZS_IDX_CMD_SMP_QUERY_RANDOM_ADDRESS
#define EZS_IDX_RSP_SMP_SEND_PAIRREQ_RESPONSE                   EZS_IDX_CMD_SMP_SEND_PAIRREQ_RESPONSE
#define EZS_IDX_RSP_SMP_SEND_PASSKEYREQ_RESPONSE                EZS_IDX_CMD_SMP_SEND_PASSKEYREQ_RESPONSE
#define EZS_IDX_RSP_SMP_GENERATE_OOB_DATA                       EZS_IDX_CMD_SMP_GENERATE_OOB_DATA
#define EZS_IDX_RSP_SMP_CLEAR_OOB_DATA                          EZS_IDX_CMD_SMP_CLEAR_OOB_DATA
#define EZS_IDX_RSP_SMP_SET_PRIVACY_MODE                        EZS_IDX_CMD_SMP_SET_PRIVACY_MODE
#define EZS_IDX_RSP_SMP_GET_PRIVACY_MODE                        EZS_IDX_CMD_SMP_GET_PRIVACY_MODE
#define EZS_IDX_RSP_SMP_SET_SECURITY_PARAMETERS                 EZS_IDX_CMD_SMP_SET_SECURITY_PARAMETERS
#define EZS_IDX_RSP_SMP_GET_SECURITY_PARAMETERS                 EZS_IDX_CMD_SMP_GET_SECURITY_PARAMETERS
#define EZS_IDX_RSP_L2CAP_CONNECT                               EZS_IDX_CMD_L2CAP_CONNECT
#define EZS_IDX_RSP_L2CAP_DISCONNECT                            EZS_IDX_CMD_L2CAP_DISCONNECT
#define EZS_IDX_RSP_L2CAP_REGISTER_PSM                          EZS_IDX_CMD_L2CAP_REGISTER_PSM
#define EZS_IDX_RSP_L2CAP_SEND_CONNREQ_RESPONSE                 EZS_IDX_CMD_L2CAP_SEND_CONNREQ_RESPONSE
#define EZS_IDX_RSP_L2CAP_SEND_CREDITS                          EZS_IDX_CMD_L2CAP_SEND_CREDITS
#define EZS_IDX_RSP_L2CAP_SEND_DATA                             EZS_IDX_CMD_L2CAP_SEND_DATA
#define EZS_IDX_RSP_GPIO_QUERY_LOGIC                            EZS_IDX_CMD_GPIO_QUERY_LOGIC
#define EZS_IDX_RSP_GPIO_QUERY_ADC                              EZS_IDX_CMD_GPIO_QUERY_ADC
#define EZS_IDX_RSP_GPIO_SET_FUNCTION                           EZS_IDX_CMD_GPIO_SET_FUNCTION
#define EZS_IDX_RSP_GPIO_GET_FUNCTION                           EZS_IDX_CMD_GPIO_GET_FUNCTION
#define EZS_IDX_RSP_GPIO_SET_DRIVE                              EZS_IDX_CMD_GPIO_SET_DRIVE
#define EZS_IDX_RSP_GPIO_GET_DRIVE                              EZS_IDX_CMD_GPIO_GET_DRIVE
#define EZS_IDX_RSP_GPIO_SET_LOGIC                              EZS_IDX_CMD_GPIO_SET_LOGIC
#define EZS_IDX_RSP_GPIO_GET_LOGIC                              EZS_IDX_CMD_GPIO_GET_LOGIC
#define EZS_IDX_RSP_GPIO_SET_INTERRUPT_MODE                     EZS_IDX_CMD_GPIO_SET_INTERRUPT_MODE
#define EZS_IDX_RSP_GPIO_GET_INTERRUPT_MODE                     EZS_IDX_CMD_GPIO_GET_INTERRUPT_MODE
#define EZS_IDX_RSP_GPIO_SET_PWM_MODE                           EZS_IDX_CMD_GPIO_SET_PWM_MODE
#define EZS_IDX_RSP_GPIO_GET_PWM_MODE                           EZS_IDX_CMD_GPIO_GET_PWM_MODE
#define EZS_IDX_RSP_P_CYSPP_CHECK                               EZS_IDX_CMD_P_CYSPP_CHECK
#define EZS_IDX_RSP_P_CYSPP_START                               EZS_IDX_CMD_P_CYSPP_START
#define EZS_IDX_RSP_P_CYSPP_SET_PARAMETERS                      EZS_IDX_CMD_P_CYSPP_SET_PARAMETERS
#define EZS_IDX_RSP_P_CYSPP_GET_PARAMETERS                      EZS_IDX_CMD_P_CYSPP_GET_PARAMETERS
#define EZS_IDX_RSP_P_CYSPP_SET_CLIENT_HANDLES                  EZS_IDX_CMD_P_CYSPP_SET_CLIENT_HANDLES
#define EZS_IDX_RSP_P_CYSPP_GET_CLIENT_HANDLES                  EZS_IDX_CMD_P_CYSPP_GET_CLIENT_HANDLES
#define EZS_IDX_RSP_P_CYSPP_SET_PACKETIZATION                   EZS_IDX_CMD_P_CYSPP_SET_PACKETIZATION
#define EZS_IDX_RSP_P_CYSPP_GET_PACKETIZATION                   EZS_IDX_CMD_P_CYSPP_GET_PACKETIZATION
#define EZS_IDX_RSP_P_CYCOMMAND_SET_PARAMETERS                  EZS_IDX_CMD_P_CYCOMMAND_SET_PARAMETERS
#define EZS_IDX_RSP_P_CYCOMMAND_GET_PARAMETERS                  EZS_IDX_CMD_P_CYCOMMAND_GET_PARAMETERS
#define EZS_IDX_RSP_P_IBEACON_SET_PARAMETERS                    EZS_IDX_CMD_P_IBEACON_SET_PARAMETERS
#define EZS_IDX_RSP_P_IBEACON_GET_PARAMETERS                    EZS_IDX_CMD_P_IBEACON_GET_PARAMETERS
#define EZS_IDX_RSP_P_EDDYSTONE_SET_PARAMETERS                  EZS_IDX_CMD_P_EDDYSTONE_SET_PARAMETERS
#define EZS_IDX_RSP_P_EDDYSTONE_GET_PARAMETERS                  EZS_IDX_CMD_P_EDDYSTONE_GET_PARAMETERS

#define EZS_CMD_COUNT                                           (126)

#define EZS_EVT_COUNT                                           (39)


/*******************************************************************************
* Error enumeration list for EZ-Serial manager.
*******************************************************************************/
typedef enum
{
    /* -------- SUCCESS CODE -------- */
    EZS_ERR_SUCCESS = 0x0000,                           /**< No error */

    /* -------- CORE ERROR CODES -------- */
    EZS_ERR_CORE = 0x0100,
    EZS_ERR_CORE_NULL_POINTER,                          /**< FW BUG: Unexpected null pointer encountered */
    EZS_ERR_CORE_MALLOC_FAILED,                         /**< FW BUG: Could not allocate memory */
    EZS_ERR_CORE_BUFFER_OVERFLOW,                       /**< FW BUG: Ran out of available space for packet creation */
    EZS_ERR_CORE_FEATURE_NOT_IMPLEMENTED,               /**< FW BUG: Unsupported feature */
    EZS_ERR_CORE_TASK_SCHEDULE_OVERFLOW,                /**< Task scheduling attempted when schedule is full */
    EZS_ERR_CORE_TASK_QUEUE_OVERFLOW,                   /**< Task queue attempted when queue is full */
    EZS_ERR_CORE_INVALID_STATE,                         /**< Invalid state for requested operation */
    EZS_ERR_CORE_OPERATION_NOT_PERMITTED,               /**< Operation not permitted */
    EZS_ERR_CORE_INSUFFICIENT_RESOURCES,                /**< Insufficient resources for requested action */
    EZS_ERR_CORE_FLASH_WRITE_NOT_PERMITTED,             /**< Unable to perform flash write at this time */
    EZS_ERR_CORE_FLASH_WRITE_FAILED,                    /**< Flash write operation failed during write */
    EZS_ERR_CORE_HARDWARE_FAILURE,                      /**< Internal chipset hardware failure */
    EZS_ERR_CORE_BLE_INITIALIZATION_FAILED,             /**< Could not initialize BLE stack */
    EZS_ERR_CORE_REPEATED_ATTEMPTS,                     /**< Repeated attempts to initialize BLE stack */
    EZS_ERR_CORE_TX_POWER_READ,                         /**< Could not read radio TX power */
    EZS_ERR_CORE_DB_VERIFICATION_FAILED,                /**< Verification prevented custom attribute addition */

    /* -------- PROTOCOL ERROR CODES -------- */
    EZS_ERR_PROTOCOL = 0x0200,
    EZS_ERR_PROTOCOL_UNRECOGNIZED_PACKET_TYPE,          /**< BUG: Unsupported packet type for text parsing */
    EZS_ERR_PROTOCOL_UNRECOGNIZED_ARGUMENT_TYPE,        /**< BUG: Unsupported argument type for text parsing */
    EZS_ERR_PROTOCOL_UNRECOGNIZED_COMMAND,              /**< Command group/ID not valid or otherwise unrecognized */
    EZS_ERR_PROTOCOL_UNRECOGNIZED_RESPONSE,             /**< BUG: Response group/ID invalid or otherwise unrecognized */
    EZS_ERR_PROTOCOL_UNRECOGNIZED_EVENT,                /**< BUG: Event group/ID invalid or otherwise unrecognized */
    EZS_ERR_PROTOCOL_SYNTAX_ERROR,                      /**< Syntax error while parsing command */
    EZS_ERR_PROTOCOL_COMMAND_TIMEOUT,                   /**< Command packet not completed within required time */
    EZS_ERR_PROTOCOL_RESPONSE_PENDING,                  /**< Command already sent but response still pending */
    EZS_ERR_PROTOCOL_INVALID_CHECKSUM,                  /**< Binary command packet has invalid checksum */
    EZS_ERR_PROTOCOL_INVALID_COMMAND_LENGTH,            /**< Command length is greater than maximum */
    EZS_ERR_PROTOCOL_INVALID_PARAMETER_COUNT,           /**< Incorrect number of parameters provided */
    EZS_ERR_PROTOCOL_INVALID_PARAMETER_VALUE,           /**< Command parameter outside of acceptable range */
    EZS_ERR_PROTOCOL_MISSING_REQUIRED_ARGUMENT,         /**< Text-mode command missing required arguments */
    EZS_ERR_PROTOCOL_INVALID_HEXADECIMAL_DATA,          /**< Invalid hexadecimal data provided (not 0-9, A-F) */
    EZS_ERR_PROTOCOL_INVALID_ESCAPE_SEQUENCE,           /**< Invalid escape sequence */
    EZS_ERR_PROTOCOL_INVALID_MACRO_SEQUENCE,            /**< Invalid macro sequence */
    EZS_ERR_PROTOCOL_FLASH_SETTINGS_PROTECTED,          /**< Attempted direct flash write of protected setting */

    /* -------- GPIO ERROR CODES -------- */
    EZS_ERR_GPIO = 0x0300,
    EZS_ERR_GPIO_PORT_NOT_SUPPORTED,                    /**< Port selected in GPIO command is not supported */

    /* -------- LL ERROR CODES -------- */
    EZS_ERR_LL = 0x0400,
    EZS_ERR_LL_CONTROLLER_BUSY,                         /**< Link layer controller busy */
    EZS_ERR_LL_NO_DEVICE_ENTITY,                        /**< Device entity not available  */
    EZS_ERR_LL_NOT_IN_BOND_LIST,                        /**< Device not found in bond list */
    EZS_ERR_LL_DEVICE_ALREADY_EXISTS,                   /**< Device already exists */

    /* -------- GAP ERROR CODES -------- */
    EZS_ERR_GAP = 0x0500,
    EZS_ERR_GAP_INVALID_CONNECTION_HANDLE,              /**< Invalid connection handle specified */
    EZS_ERR_GAP_CONNECTION_REQUIRED,                    /**< Connection required, but none is available */
    EZS_ERR_GAP_ROLE,                                   /**< Incorrect GAP role for this operation */
    EZS_ERR_GAP_ADV_QUEUE_OVERFLOW,                     /**< Advertisement queue attempted when queue is full */

    /* -------- GATT ERROR CODES -------- */
    EZS_ERR_GATT = 0x0600,
    EZS_ERR_GATT_INVALID_ATTRIBUTE_HANDLE,              /**< Invalid attribute handle for GATT operation */
    EZS_ERR_GATT_READ_NOT_PERMITTED,                    /**< Read not permitted on this attribute */
    EZS_ERR_GATT_WRITE_NOT_PERMITTED,                   /**< Write not permitted on this attribute */
    EZS_ERR_GATT_INVALID_PDU,                           /**< Invalid PDU error code format from client */
    EZS_ERR_GATT_INSUFFICIENT_AUTHENTICATION,           /**< Attribute access attempted without authentication */
    EZS_ERR_GATT_REQUEST_NOT_SUPPORTED,                 /**< Server does not support the ATT request from the client */
    EZS_ERR_GATT_INVALID_OFFSET,                        /**< Invalid offset requested by client for long operation */
    EZS_ERR_GATT_INSUFFICIENT_AUTHORIZATION,            /**< Attribute access attempted without authorization */
    EZS_ERR_GATT_PREPARE_WRITE_QUEUE_FULL,              /**< No space available in the server's prepare write queue */
    EZS_ERR_GATT_ATTRIBUTE_NOT_FOUND,                   /**< Attribute not found in specified range during discovery */
    EZS_ERR_GATT_ATTRIBUTE_NOT_LONG,                    /**< Long operation attempted on attribute that is not long */
    EZS_ERR_GATT_INSUFFICIENT_ENC_KEY_SIZE,             /**< Insufficient encryption key size for ATT request */
    EZS_ERR_GATT_INVALID_ATTRIBUTE_LENGTH,              /**< Attribute value length incorrect for requested operation */
    EZS_ERR_GATT_UNLIKELY_ERROR,                        /**< Unlikely error while processing ATT request */
    EZS_ERR_GATT_INSUFFICIENT_ENCRYPTION,               /**< Attribute access attempted without encryption */
    EZS_ERR_GATT_UNSUPPORTED_GROUP_TYPE,                /**< Unsupported group type specified in Read By Group Type */
    EZS_ERR_GATT_INSUFFICIENT_RESOURCES,                /**< Server has insufficient resources for client request */
    EZS_ERR_GATT_CLIENT_NOT_SUBSCRIBED = 0x0680,        /**< Client has not subscribed to updates on characteristic */

    /* -------- L2CAP ERROR CODES -------- */
    EZS_ERR_L2CAP = 0x0700,
    EZS_ERR_L2CAP_NOT_IN_BOND_LIST,                     /**< Device not found in bond list */
    EZS_ERR_L2CAP_PSM_WRONG_ENCODING,                   /**< Wrong L2CAP PSM encoding */
    EZS_ERR_L2CAP_PSM_ALREADY_REGISTERED,               /**< L2CAP PSM already registered */
    EZS_ERR_L2CAP_PSM_NOT_REGISTERED,                   /**< L2CAP PSM not registered */
    EZS_ERR_L2CAP_CONNECTION_ENTITY_NOT_FOUND,          /**< L2CAP connection entity not found */
    EZS_ERR_L2CAP_CHANNEL_NOT_FOUND,                    /**< L2CAP channel not found */
    EZS_ERR_L2CAP_PSM_NOT_IN_RANGE,                     /**< L2CAP PSM not in range */

    /* -------- SMP ERROR CODES -------- */
    EZS_ERR_SMP = 0x0800,
    EZS_ERR_SMP_OOB_NOT_AVAILABLE,                      /**< Out-of-band (OOB) pairing not available */
    EZS_ERR_SMP_SECURITY_OPERATION_FAILED,              /**< Security operation failed */
    EZS_ERR_SMP_MIC_AUTH_FAILED,                        /**< Message integrity check (MIC) authentication failed */

    /* -------- BLUETOOTH CORE SPEC ERROR CODES -------- */
    EZS_ERR_SPEC = 0x0900,
    EZS_ERR_SPEC_UNKNOWN_HCI_COMMAND,                       /**< 0x01 */
    EZS_ERR_SPEC_UNKNOWN_CONNECTION_IDENTIFIER,             /**< 0x02 */
    EZS_ERR_SPEC_HARDWARE_FAILURE,                          /**< 0x03 */
    EZS_ERR_SPEC_PAGE_TIMEOUT,                              /**< 0x04 */
    EZS_ERR_SPEC_AUTHENTICATION_FAILURE,                    /**< 0x05 */
    EZS_ERR_SPEC_PIN_OR_KEY_MISSING,                        /**< 0x06 */
    EZS_ERR_SPEC_MEMORY_CAPACITY_EXCEEDED,                  /**< 0x07 */
    EZS_ERR_SPEC_CONNECTION_TIMEOUT,                        /**< 0x08 */
    EZS_ERR_SPEC_CONNECTION_LIMIT_EXCEEDED,                 /**< 0x09 */
    EZS_ERR_SPEC_SYNCHRONOUS_CONN_LIMIT_DEVICE_EXCEEDED,    /**< 0x0A */
    EZS_ERR_SPEC_ACL_CONNECTION_ALREADY_EXISTS,             /**< 0x0B */
    EZS_ERR_SPEC_COMMAND_DISALLOWED,                        /**< 0x0C */
    EZS_ERR_SPEC_CONNECTION_REJECTED_LIMITED_RESOURCES,     /**< 0x0D */
    EZS_ERR_SPEC_CONNECTION_REJECTED_SECURITY_REASONS,      /**< 0x0E */
    EZS_ERR_SPEC_CONNECTION_REJECTED_UNACCEPTABLE_BDADDR,   /**< 0x0F */
    EZS_ERR_SPEC_CONNECTION_ACCEPT_TIMEOUT_EXCEEDED,        /**< 0x10 */
    EZS_ERR_SPEC_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE,    /**< 0x11 */
    EZS_ERR_SPEC_INVALID_HCI_COMMAND_PARAMETERS,            /**< 0x12 */
    EZS_ERR_SPEC_REMOTE_USER_TERMINATED_CONNECTION,         /**< 0x13 */
    EZS_ERR_SPEC_REMOTE_DEVICE_TERMINATED_LOW_RESOURCES,    /**< 0x14 */
    EZS_ERR_SPEC_REMOTE_DEVICE_TERMINATED_POWER_OFF,        /**< 0x15 */
    EZS_ERR_SPEC_CONNECTION_TERMINATED_BY_LOCAL_HOST,       /**< 0x16 */
    EZS_ERR_SPEC_REPEATED_ATTEMPTS,                         /**< 0x17 */
    EZS_ERR_SPEC_PAIRING_NOT_ALLOWED,                       /**< 0x18 */
    EZS_ERR_SPEC_UNKNOWN_LMP_PDU,                           /**< 0x19 */
    EZS_ERR_SPEC_UNSUPPORTED_REMOTE_LMP_FEATURE,            /**< 0x1A */
    EZS_ERR_SPEC_SCO_OFFSET_REJECTED,                       /**< 0x1B */
    EZS_ERR_SPEC_SCO_INTERVAL_REJECTED,                     /**< 0x1C */
    EZS_ERR_SPEC_SCO_AIR_MODE_REJECTED,                     /**< 0x1D */
    EZS_ERR_SPEC_INVALID_LMP_LL_PARAMETERS,                 /**< 0x1E */
    EZS_ERR_SPEC_UNSPECIFIED_ERROR,                         /**< 0x1F */
    EZS_ERR_SPEC_UNSUPPORTED_LMP_LL_PARAMTER_VALUE,         /**< 0x20 */
    EZS_ERR_SPEC_ROLE_CHANGE_NOT_ALLOWED,                   /**< 0x21 */
    EZS_ERR_SPEC_LMP_LL_RESPONSE_TIMEOUT,                   /**< 0x22 */
    EZS_ERR_SPEC_LMP_ERROR_TRANSACTION_COLLISION,           /**< 0x23 */
    EZS_ERR_SPEC_LMP_PDU_NOT_ALLOWED,                       /**< 0x24 */
    EZS_ERR_SPEC_ENCRYPTION_MODE_NOT_ACCEPTABLE,            /**< 0x25 */
    EZS_ERR_SPEC_LINK_KEY_CANNOT_BE_CHANGED,                /**< 0x26 */
    EZS_ERR_SPEC_REQUESTED_QOS_NOT_SUPPORTED,               /**< 0x27 */
    EZS_ERR_SPEC_INSTANT_PASSED,                            /**< 0x28 */
    EZS_ERR_SPEC_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED,       /**< 0x29 */
    EZS_ERR_SPEC_DIFFERENT_TRANSACTION_COLLISION,           /**< 0x2A */
    /* 0x2B reserved */
    EZS_ERR_SPEC_QOS_UNACCEPTABLE_PARAMETER = 0x092C,       /**< 0x2C */
    EZS_ERR_SPEC_QOS_REJECTED,                              /**< 0x2D */
    EZS_ERR_SPEC_CHANNEL_CLASSIFICATION_NOT_SUPPORTED,      /**< 0x2E */
    EZS_ERR_SPEC_INSUFFICIENT_SECURITY,                     /**< 0x2F */
    EZS_ERR_SPEC_PARAMETER_OUT_OF_MANDATORY_RANGE,          /**< 0x30 */
    /* 0x31 reserved */
    EZS_ERR_SPEC_ROLE_SWITCH_PENDING = 0x0932,              /**< 0x32 */
    /* 0x33 reserved */
    EZS_ERR_SPEC_RESERVED_SLOT_VIOLATION = 0x0934,          /**< 0x34 */
    EZS_ERR_SPEC_ROLE_SWITCH_FAILED,                        /**< 0x35 */
    EZS_ERR_SPEC_EXTENDED_INQUIRY_RSP_TOO_LARGE,            /**< 0x36 */
    EZS_ERR_SPEC_SSP_NOT_SUPPORTED_BY_HOST,                 /**< 0x37 */
    EZS_ERR_SPEC_HOST_BUSY_PAIRING,                         /**< 0x38 */
    EZS_ERR_SPEC_CONNECTION_REJECTED_NO_SUITABLE_CHANNEL,   /**< 0x39 */
    EZS_ERR_SPEC_CONTROLLER_BUSY,                           /**< 0x3A */
    EZS_ERR_SPEC_UNACCEPTABLE_CONNECTION_PARAMETERS,        /**< 0x3B */
    EZS_ERR_SPEC_DIRECTED_ADVERTISING_TIMEOUT,              /**< 0x3C */
    EZS_ERR_SPEC_CONNECTION_TERMINATED_MIC_FAILURE,         /**< 0x3D */
    EZS_ERR_SPEC_CONNECTION_FAILED_TO_BE_ESTABLISHED,       /**< 0x3E */
    EZS_ERR_SPEC_MAC_CONNECTION_FAILED,                     /**< 0x3F */
    EZS_ERR_SPEC_COARSE_CLOCK_ADJ_REJECTED,                 /**< 0x40 */
    
    /* -------- UNKNOWN ERROR CODES -------- */
    EZS_ERR_UNKNOWN = 0xEEEE,                           /**< FW BUG: Unhandled error */
} ezs_err_t;


/*******************************************************************************
* API packet type enumeration list.
*******************************************************************************/
typedef enum
{
    EZS_PACKET_TYPE_COMMAND = 0,
    EZS_PACKET_TYPE_RESPONSE,
    EZS_PACKET_TYPE_EVENT,
    EZS_PACKET_TYPE_ANY
} ezs_packet_type_t;


/*******************************************************************************
* Possible return values from app-specific hardware serial output function.
*******************************************************************************/
typedef enum
{
    EZS_OUTPUT_RESULT_DATA_WRITTEN,
    EZS_OUTPUT_RESULT_RESPONSE_PENDING,
    EZS_OUTPUT_RESULT_NO_HANDLER,
    EZS_OUTPUT_RESULT_UNRECOGNIZED_COMMAND,
} ezs_output_result_t;


/*******************************************************************************
* Possible return values from app-specific hardware serial input function.
*******************************************************************************/
typedef enum
{
    EZS_INPUT_RESULT_BYTE_READ,
    EZS_INPUT_RESULT_BYTE_IGNORED,
    EZS_INPUT_RESULT_NO_DATA,
    EZS_INPUT_RESULT_TIMEOUT,
    EZS_INPUT_RESULT_NO_HANDLER,
    EZS_INPUT_RESULT_NULL_POINTER,
    EZS_INPUT_RESULT_BUFFER_OVERFLOW,
    EZS_INPUT_RESULT_IN_PROGRESS,
    EZS_INPUT_RESULT_INVALID_CHECKSUM,
    EZS_INPUT_RESULT_PACKET_COMPLETE,
    EZS_INPUT_RESULT_PACKET_IDENTIFIED,
    EZS_INPUT_RESULT_UNRECOGNIZED_RESPONSE,
    EZS_INPUT_RESULT_UNRECOGNIZED_EVENT,
    EZS_INPUT_RESULT_UNHANDLED_PACKET,
} ezs_input_result_t;


/*******************************************************************************
* API command packet index list (refers to position in ezs_tbl_cmd).
*******************************************************************************/
typedef enum ezs_idx_cmd_t
{
    EZS_IDX_CMD_SYSTEM_PING                                        = 0,
    EZS_IDX_CMD_SYSTEM_REBOOT,                                  /* = 1 */
    EZS_IDX_CMD_SYSTEM_DUMP,                                    /* = 2 */
    EZS_IDX_CMD_SYSTEM_STORE_CONFIG,                            /* = 3 */
    EZS_IDX_CMD_SYSTEM_FACTORY_RESET,                           /* = 4 */
    EZS_IDX_CMD_SYSTEM_QUERY_FIRMWARE_VERSION,                  /* = 5 */
    EZS_IDX_CMD_SYSTEM_QUERY_UNIQUE_ID,                         /* = 6 */
    EZS_IDX_CMD_SYSTEM_QUERY_RANDOM_NUMBER,                     /* = 7 */
    EZS_IDX_CMD_SYSTEM_AES_ENCRYPT,                             /* = 8 */
    EZS_IDX_CMD_SYSTEM_AES_DECRYPT,                             /* = 9 */
    EZS_IDX_CMD_SYSTEM_WRITE_USER_DATA,                         /* = 10 */
    EZS_IDX_CMD_SYSTEM_READ_USER_DATA,                          /* = 11 */
    EZS_IDX_CMD_DFU_REBOOT,                                     /* = 12 */
    EZS_IDX_CMD_GAP_CONNECT,                                    /* = 13 */
    EZS_IDX_CMD_GAP_CANCEL_CONNECTION,                          /* = 14 */
    EZS_IDX_CMD_GAP_UPDATE_CONN_PARAMETERS,                     /* = 15 */
    EZS_IDX_CMD_GAP_SEND_CONNUPDATE_RESPONSE,                   /* = 16 */
    EZS_IDX_CMD_GAP_DISCONNECT,                                 /* = 17 */
    EZS_IDX_CMD_GAP_ADD_WHITELIST_ENTRY,                        /* = 18 */
    EZS_IDX_CMD_GAP_DELETE_WHITELIST_ENTRY,                     /* = 19 */
    EZS_IDX_CMD_GAP_START_ADV,                                  /* = 20 */
    EZS_IDX_CMD_GAP_STOP_ADV,                                   /* = 21 */
    EZS_IDX_CMD_GAP_START_SCAN,                                 /* = 22 */
    EZS_IDX_CMD_GAP_STOP_SCAN,                                  /* = 23 */
    EZS_IDX_CMD_GAP_QUERY_PEER_ADDRESS,                         /* = 24 */
    EZS_IDX_CMD_GAP_QUERY_RSSI,                                 /* = 25 */
    EZS_IDX_CMD_GAP_QUERY_WHITELIST,                            /* = 26 */
    EZS_IDX_CMD_GATTS_CREATE_ATTR,                              /* = 27 */
    EZS_IDX_CMD_GATTS_DELETE_ATTR,                              /* = 28 */
    EZS_IDX_CMD_GATTS_VALIDATE_DB,                              /* = 29 */
    EZS_IDX_CMD_GATTS_STORE_DB,                                 /* = 30 */
    EZS_IDX_CMD_GATTS_DUMP_DB,                                  /* = 31 */
    EZS_IDX_CMD_GATTS_DISCOVER_SERVICES,                        /* = 32 */
    EZS_IDX_CMD_GATTS_DISCOVER_CHARACTERISTICS,                 /* = 33 */
    EZS_IDX_CMD_GATTS_DISCOVER_DESCRIPTORS,                     /* = 34 */
    EZS_IDX_CMD_GATTS_READ_HANDLE,                              /* = 35 */
    EZS_IDX_CMD_GATTS_WRITE_HANDLE,                             /* = 36 */
    EZS_IDX_CMD_GATTS_NOTIFY_HANDLE,                            /* = 37 */
    EZS_IDX_CMD_GATTS_INDICATE_HANDLE,                          /* = 38 */
    EZS_IDX_CMD_GATTS_SEND_WRITEREQ_RESPONSE,                   /* = 39 */
    EZS_IDX_CMD_GATTC_DISCOVER_SERVICES,                        /* = 40 */
    EZS_IDX_CMD_GATTC_DISCOVER_CHARACTERISTICS,                 /* = 41 */
    EZS_IDX_CMD_GATTC_DISCOVER_DESCRIPTORS,                     /* = 42 */
    EZS_IDX_CMD_GATTC_READ_HANDLE,                              /* = 43 */
    EZS_IDX_CMD_GATTC_WRITE_HANDLE,                             /* = 44 */
    EZS_IDX_CMD_GATTC_CONFIRM_INDICATION,                       /* = 45 */
    EZS_IDX_CMD_SMP_QUERY_BONDS,                                /* = 46 */
    EZS_IDX_CMD_SMP_DELETE_BOND,                                /* = 47 */
    EZS_IDX_CMD_SMP_PAIR,                                       /* = 48 */
    EZS_IDX_CMD_SMP_QUERY_RANDOM_ADDRESS,                       /* = 49 */
    EZS_IDX_CMD_SMP_SEND_PAIRREQ_RESPONSE,                      /* = 50 */
    EZS_IDX_CMD_SMP_SEND_PASSKEYREQ_RESPONSE,                   /* = 51 */
    EZS_IDX_CMD_SMP_GENERATE_OOB_DATA,                          /* = 52 */
    EZS_IDX_CMD_SMP_CLEAR_OOB_DATA,                             /* = 53 */
    EZS_IDX_CMD_L2CAP_CONNECT,                                  /* = 54 */
    EZS_IDX_CMD_L2CAP_DISCONNECT,                               /* = 55 */
    EZS_IDX_CMD_L2CAP_REGISTER_PSM,                             /* = 56 */
    EZS_IDX_CMD_L2CAP_SEND_CONNREQ_RESPONSE,                    /* = 57 */
    EZS_IDX_CMD_L2CAP_SEND_CREDITS,                             /* = 58 */
    EZS_IDX_CMD_L2CAP_SEND_DATA,                                /* = 59 */
    EZS_IDX_CMD_GPIO_QUERY_LOGIC,                               /* = 60 */
    EZS_IDX_CMD_GPIO_QUERY_ADC,                                 /* = 61 */
    EZS_IDX_CMD_PROTOCOL_SET_PARSE_MODE,                        /* = 62 */
    EZS_IDX_CMD_PROTOCOL_SET_ECHO_MODE,                         /* = 63 */
    EZS_IDX_CMD_SYSTEM_SET_BLUETOOTH_ADDRESS,                   /* = 64 */
    EZS_IDX_CMD_SYSTEM_SET_ECO_PARAMETERS,                      /* = 65 */
    EZS_IDX_CMD_SYSTEM_SET_WCO_PARAMETERS,                      /* = 66 */
    EZS_IDX_CMD_SYSTEM_SET_SLEEP_PARAMETERS,                    /* = 67 */
    EZS_IDX_CMD_SYSTEM_SET_TX_POWER,                            /* = 68 */
    EZS_IDX_CMD_SYSTEM_SET_TRANSPORT,                           /* = 69 */
    EZS_IDX_CMD_SYSTEM_SET_UART_PARAMETERS,                     /* = 70 */
    EZS_IDX_CMD_GAP_SET_DEVICE_NAME,                            /* = 71 */
    EZS_IDX_CMD_GAP_SET_DEVICE_APPEARANCE,                      /* = 72 */
    EZS_IDX_CMD_GAP_SET_ADV_DATA,                               /* = 73 */
    EZS_IDX_CMD_GAP_SET_SR_DATA,                                /* = 74 */
    EZS_IDX_CMD_GAP_SET_ADV_PARAMETERS,                         /* = 75 */
    EZS_IDX_CMD_GAP_SET_SCAN_PARAMETERS,                        /* = 76 */
    EZS_IDX_CMD_GAP_SET_CONN_PARAMETERS,                        /* = 77 */
    EZS_IDX_CMD_GATTS_SET_PARAMETERS,                           /* = 78 */
    EZS_IDX_CMD_GATTC_SET_PARAMETERS,                           /* = 79 */
    EZS_IDX_CMD_SMP_SET_PRIVACY_MODE,                           /* = 80 */
    EZS_IDX_CMD_SMP_SET_SECURITY_PARAMETERS,                    /* = 81 */
    EZS_IDX_CMD_GPIO_SET_FUNCTION,                              /* = 82 */
    EZS_IDX_CMD_GPIO_SET_DRIVE,                                 /* = 83 */
    EZS_IDX_CMD_GPIO_SET_LOGIC,                                 /* = 84 */
    EZS_IDX_CMD_GPIO_SET_INTERRUPT_MODE,                        /* = 85 */
    EZS_IDX_CMD_GPIO_SET_PWM_MODE,                              /* = 86 */
    EZS_IDX_CMD_PROTOCOL_GET_PARSE_MODE,                        /* = 87 */
    EZS_IDX_CMD_PROTOCOL_GET_ECHO_MODE,                         /* = 88 */
    EZS_IDX_CMD_SYSTEM_GET_BLUETOOTH_ADDRESS,                   /* = 89 */
    EZS_IDX_CMD_SYSTEM_GET_ECO_PARAMETERS,                      /* = 90 */
    EZS_IDX_CMD_SYSTEM_GET_WCO_PARAMETERS,                      /* = 91 */
    EZS_IDX_CMD_SYSTEM_GET_SLEEP_PARAMETERS,                    /* = 92 */
    EZS_IDX_CMD_SYSTEM_GET_TX_POWER,                            /* = 93 */
    EZS_IDX_CMD_SYSTEM_GET_TRANSPORT,                           /* = 94 */
    EZS_IDX_CMD_SYSTEM_GET_UART_PARAMETERS,                     /* = 95 */
    EZS_IDX_CMD_GAP_GET_DEVICE_NAME,                            /* = 96 */
    EZS_IDX_CMD_GAP_GET_DEVICE_APPEARANCE,                      /* = 97 */
    EZS_IDX_CMD_GAP_GET_ADV_DATA,                               /* = 98 */
    EZS_IDX_CMD_GAP_GET_SR_DATA,                                /* = 99 */
    EZS_IDX_CMD_GAP_GET_ADV_PARAMETERS,                         /* = 100 */
    EZS_IDX_CMD_GAP_GET_SCAN_PARAMETERS,                        /* = 101 */
    EZS_IDX_CMD_GAP_GET_CONN_PARAMETERS,                        /* = 102 */
    EZS_IDX_CMD_GATTS_GET_PARAMETERS,                           /* = 103 */
    EZS_IDX_CMD_GATTC_GET_PARAMETERS,                           /* = 104 */
    EZS_IDX_CMD_SMP_GET_PRIVACY_MODE,                           /* = 105 */
    EZS_IDX_CMD_SMP_GET_SECURITY_PARAMETERS,                    /* = 106 */
    EZS_IDX_CMD_GPIO_GET_FUNCTION,                              /* = 107 */
    EZS_IDX_CMD_GPIO_GET_DRIVE,                                 /* = 108 */
    EZS_IDX_CMD_GPIO_GET_LOGIC,                                 /* = 109 */
    EZS_IDX_CMD_GPIO_GET_INTERRUPT_MODE,                        /* = 110 */
    EZS_IDX_CMD_GPIO_GET_PWM_MODE,                              /* = 111 */
    EZS_IDX_CMD_P_CYSPP_CHECK,                                  /* = 112 */
    EZS_IDX_CMD_P_CYSPP_START,                                  /* = 113 */
    EZS_IDX_CMD_P_CYSPP_SET_PARAMETERS,                         /* = 114 */
    EZS_IDX_CMD_P_CYSPP_GET_PARAMETERS,                         /* = 115 */
    EZS_IDX_CMD_P_CYSPP_SET_CLIENT_HANDLES,                     /* = 116 */
    EZS_IDX_CMD_P_CYSPP_GET_CLIENT_HANDLES,                     /* = 117 */
    EZS_IDX_CMD_P_CYSPP_SET_PACKETIZATION,                      /* = 118 */
    EZS_IDX_CMD_P_CYSPP_GET_PACKETIZATION,                      /* = 119 */
    EZS_IDX_CMD_P_CYCOMMAND_SET_PARAMETERS,                     /* = 120 */
    EZS_IDX_CMD_P_CYCOMMAND_GET_PARAMETERS,                     /* = 121 */
    EZS_IDX_CMD_P_IBEACON_SET_PARAMETERS,                       /* = 122 */
    EZS_IDX_CMD_P_IBEACON_GET_PARAMETERS,                       /* = 123 */
    EZS_IDX_CMD_P_EDDYSTONE_SET_PARAMETERS,                     /* = 124 */
    EZS_IDX_CMD_P_EDDYSTONE_GET_PARAMETERS,                     /* = 125 */
    EZS_IDX_CMD_MAX
} ezs_idx_cmd_t;


/*******************************************************************************
* API event packet index list (refers to position in ezs_tbl_evt).
*******************************************************************************/
typedef enum ezs_idx_evt_t
{
    EZS_IDX_EVT_SYSTEM_BOOT                                        = 0 + 126,
    EZS_IDX_EVT_SYSTEM_ERROR,                                   /* = 1 + 126 */
    EZS_IDX_EVT_SYSTEM_FACTORY_RESET_COMPLETE,                  /* = 2 + 126 */
    EZS_IDX_EVT_SYSTEM_FACTORY_TEST_ENTERED,                    /* = 3 + 126 */
    EZS_IDX_EVT_SYSTEM_DUMP_BLOB,                               /* = 4 + 126 */
    EZS_IDX_EVT_DFU_BOOT,                                       /* = 5 + 126 */
    EZS_IDX_EVT_DFU_CLIENT_STATUS,                              /* = 6 + 126 */
    EZS_IDX_EVT_GAP_WHITELIST_ENTRY,                            /* = 7 + 126 */
    EZS_IDX_EVT_GAP_ADV_STATE_CHANGED,                          /* = 8 + 126 */
    EZS_IDX_EVT_GAP_SCAN_STATE_CHANGED,                         /* = 9 + 126 */
    EZS_IDX_EVT_GAP_SCAN_RESULT,                                /* = 10 + 126 */
    EZS_IDX_EVT_GAP_CONNECTED,                                  /* = 11 + 126 */
    EZS_IDX_EVT_GAP_DISCONNECTED,                               /* = 12 + 126 */
    EZS_IDX_EVT_GAP_CONNECTION_UPDATE_REQUESTED,                /* = 13 + 126 */
    EZS_IDX_EVT_GAP_CONNECTION_UPDATED,                         /* = 14 + 126 */
    EZS_IDX_EVT_GATTS_DISCOVER_RESULT,                          /* = 15 + 126 */
    EZS_IDX_EVT_GATTS_DATA_WRITTEN,                             /* = 16 + 126 */
    EZS_IDX_EVT_GATTS_INDICATION_CONFIRMED,                     /* = 17 + 126 */
    EZS_IDX_EVT_GATTS_DB_ENTRY_BLOB,                            /* = 18 + 126 */
    EZS_IDX_EVT_GATTC_DISCOVER_RESULT,                          /* = 19 + 126 */
    EZS_IDX_EVT_GATTC_REMOTE_PROCEDURE_COMPLETE,                /* = 20 + 126 */
    EZS_IDX_EVT_GATTC_DATA_RECEIVED,                            /* = 21 + 126 */
    EZS_IDX_EVT_GATTC_WRITE_RESPONSE,                           /* = 22 + 126 */
    EZS_IDX_EVT_SMP_BOND_ENTRY,                                 /* = 23 + 126 */
    EZS_IDX_EVT_SMP_PAIRING_REQUESTED,                          /* = 24 + 126 */
    EZS_IDX_EVT_SMP_PAIRING_RESULT,                             /* = 25 + 126 */
    EZS_IDX_EVT_SMP_ENCRYPTION_STATUS,                          /* = 26 + 126 */
    EZS_IDX_EVT_SMP_PASSKEY_DISPLAY_REQUESTED,                  /* = 27 + 126 */
    EZS_IDX_EVT_SMP_PASSKEY_ENTRY_REQUESTED,                    /* = 28 + 126 */
    EZS_IDX_EVT_L2CAP_CONNECTION_REQUESTED,                     /* = 29 + 126 */
    EZS_IDX_EVT_L2CAP_CONNECTION_RESPONSE,                      /* = 30 + 126 */
    EZS_IDX_EVT_L2CAP_DATA_RECEIVED,                            /* = 31 + 126 */
    EZS_IDX_EVT_L2CAP_DISCONNECTED,                             /* = 32 + 126 */
    EZS_IDX_EVT_L2CAP_RX_CREDITS_LOW,                           /* = 33 + 126 */
    EZS_IDX_EVT_L2CAP_TX_CREDITS_RECEIVED,                      /* = 34 + 126 */
    EZS_IDX_EVT_L2CAP_COMMAND_REJECTED,                         /* = 35 + 126 */
    EZS_IDX_EVT_GPIO_INTERRUPT,                                 /* = 36 + 126 */
    EZS_IDX_EVT_P_CYSPP_STATUS,                                 /* = 37 + 126 */
    EZS_IDX_EVT_P_CYCOMMAND_STATUS,                             /* = 38 + 126 */
    EZS_IDX_EVT_MAX
} ezs_idx_evt_t;


/*******************************************************************************
* Enumerated list of possible argument types used by API protocol.
*******************************************************************************/
typedef enum
{
    EZS_ARGTYPE_UINT8 = 0,      /**< 1 byte, unsigned 8-bit integer */
    EZS_ARGTYPE_INT8,           /**< 1 byte, signed 8-bit integer */
    EZS_ARGTYPE_UINT16,         /**< 2 bytes, unsigned 16-bit integer */
    EZS_ARGTYPE_INT16,          /**< 2 bytes, signed 16-bit integer */
    EZS_ARGTYPE_UINT32,         /**< 4 bytes, unsigned 32-bit integer */
    EZS_ARGTYPE_INT32,          /**< 4 bytes, signed 32-bit integer */
    EZS_ARGTYPE_UINT8A,         /**< 1+ bytes, binary byte array with 1-byte length prefix */
    EZS_ARGTYPE_STRING,         /**< 1+ bytes, character string with 1-byte length prefix */
    EZS_ARGTYPE_LONGUINT8A,     /**< 2+ bytes, binary byte array with 2-byte length prefix */
    EZS_ARGTYPE_LONGSTRING,     /**< 2+ bytes, character string with 2-byte length prefix */
    EZS_ARGTYPE_MACADDR         /**< 6 bytes */
} ezs_argtype_t;


/*******************************************************************************
* Structure defining a length-specified byte array, maximum 255 bytes. This is
* also used for strings.
*******************************************************************************/
__PACKDEF(uint8a_t,
{
    uint8_t length;
    uint8_t data[EZS_UINT8A_ACTUAL_MAX];
});


/*******************************************************************************
* Structure defining a length-specified byte array, maximum 65535 bytes. This
* is also used for long strings.
*******************************************************************************/
__PACKDEF(longuint8a_t,
{
    uint16_t length;
    uint8_t data[EZS_LONGUINT8A_ACTUAL_MAX];
});


/*******************************************************************************
* Structure containing a MAC address in a byte array.
*******************************************************************************/
__PACKDEF(macaddr_t,
{
    uint8_t addr[6];
});


/*******************************************************************************
* Generic response structure, containing only a result value.
*******************************************************************************/
__PACKDEF(ezs_rsp_generic_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_protocol_set_parse_mode_t,
{
    uint8_t mode;
});

__PACKDEF(ezs_rsp_protocol_set_parse_mode_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_protocol_get_parse_mode_t,
{
});

__PACKDEF(ezs_rsp_protocol_get_parse_mode_t,
{
    uint16_t result;
    uint8_t mode;
});

__PACKDEF(ezs_cmd_protocol_set_echo_mode_t,
{
    uint8_t mode;
});

__PACKDEF(ezs_rsp_protocol_set_echo_mode_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_protocol_get_echo_mode_t,
{
});

__PACKDEF(ezs_rsp_protocol_get_echo_mode_t,
{
    uint16_t result;
    uint8_t mode;
});

__PACKDEF(ezs_cmd_system_ping_t,
{
});

__PACKDEF(ezs_rsp_system_ping_t,
{
    uint16_t result;
    uint32_t runtime;
    uint16_t fraction;
});

__PACKDEF(ezs_cmd_system_reboot_t,
{
});

__PACKDEF(ezs_rsp_system_reboot_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_dump_t,
{
    uint8_t type;
});

__PACKDEF(ezs_rsp_system_dump_t,
{
    uint16_t result;
    uint16_t length;
});

__PACKDEF(ezs_cmd_system_store_config_t,
{
});

__PACKDEF(ezs_rsp_system_store_config_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_factory_reset_t,
{
});

__PACKDEF(ezs_rsp_system_factory_reset_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_query_firmware_version_t,
{
});

__PACKDEF(ezs_rsp_system_query_firmware_version_t,
{
    uint16_t result;
    uint32_t app;
    uint32_t stack;
    uint16_t protocol;
    uint8_t hardware;
});

__PACKDEF(ezs_cmd_system_query_unique_id_t,
{
});

__PACKDEF(ezs_rsp_system_query_unique_id_t,
{
    uint16_t result;
    uint8a_t id;
});

__PACKDEF(ezs_cmd_system_query_random_number_t,
{
});

__PACKDEF(ezs_rsp_system_query_random_number_t,
{
    uint16_t result;
    uint8a_t data;
});

__PACKDEF(ezs_cmd_system_aes_encrypt_t,
{
    uint8a_t in_struct;
});

__PACKDEF(ezs_rsp_system_aes_encrypt_t,
{
    uint16_t result;
    uint8a_t out;
});

__PACKDEF(ezs_cmd_system_aes_decrypt_t,
{
    uint8a_t in_struct;
});

__PACKDEF(ezs_rsp_system_aes_decrypt_t,
{
    uint16_t result;
    uint8a_t out;
});

__PACKDEF(ezs_cmd_system_write_user_data_t,
{
    uint16_t offset;
    uint8a_t data;
});

__PACKDEF(ezs_rsp_system_write_user_data_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_read_user_data_t,
{
    uint16_t offset;
    uint8_t length;
});

__PACKDEF(ezs_rsp_system_read_user_data_t,
{
    uint16_t result;
    uint8a_t data;
});

__PACKDEF(ezs_cmd_system_set_bluetooth_address_t,
{
    macaddr_t address;
});

__PACKDEF(ezs_rsp_system_set_bluetooth_address_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_get_bluetooth_address_t,
{
});

__PACKDEF(ezs_rsp_system_get_bluetooth_address_t,
{
    uint16_t result;
    macaddr_t address;
});

__PACKDEF(ezs_cmd_system_set_eco_parameters_t,
{
    uint16_t trim;
});

__PACKDEF(ezs_rsp_system_set_eco_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_get_eco_parameters_t,
{
});

__PACKDEF(ezs_rsp_system_get_eco_parameters_t,
{
    uint16_t result;
    uint16_t trim;
});

__PACKDEF(ezs_cmd_system_set_wco_parameters_t,
{
    uint8_t accuracy;
});

__PACKDEF(ezs_rsp_system_set_wco_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_get_wco_parameters_t,
{
});

__PACKDEF(ezs_rsp_system_get_wco_parameters_t,
{
    uint16_t result;
    uint8_t accuracy;
});

__PACKDEF(ezs_cmd_system_set_sleep_parameters_t,
{
    uint8_t level;
});

__PACKDEF(ezs_rsp_system_set_sleep_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_get_sleep_parameters_t,
{
});

__PACKDEF(ezs_rsp_system_get_sleep_parameters_t,
{
    uint16_t result;
    uint8_t level;
});

__PACKDEF(ezs_cmd_system_set_tx_power_t,
{
    uint8_t power;
});

__PACKDEF(ezs_rsp_system_set_tx_power_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_get_tx_power_t,
{
});

__PACKDEF(ezs_rsp_system_get_tx_power_t,
{
    uint16_t result;
    uint8_t power;
});

__PACKDEF(ezs_cmd_system_set_transport_t,
{
    uint8_t interface;
});

__PACKDEF(ezs_rsp_system_set_transport_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_get_transport_t,
{
});

__PACKDEF(ezs_rsp_system_get_transport_t,
{
    uint16_t result;
    uint8_t interface;
});

__PACKDEF(ezs_cmd_system_set_uart_parameters_t,
{
    uint32_t baud;
    uint8_t autobaud;
    uint8_t autocorrect;
    uint8_t flow;
    uint8_t databits;
    uint8_t parity;
    uint8_t stopbits;
});

__PACKDEF(ezs_rsp_system_set_uart_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_system_get_uart_parameters_t,
{
});

__PACKDEF(ezs_rsp_system_get_uart_parameters_t,
{
    uint16_t result;
    uint32_t baud;
    uint8_t autobaud;
    uint8_t autocorrect;
    uint8_t flow;
    uint8_t databits;
    uint8_t parity;
    uint8_t stopbits;
});

__PACKDEF(ezs_evt_system_boot_t,
{
    uint32_t app;
    uint32_t stack;
    uint16_t protocol;
    uint8_t hardware;
    uint8_t cause;
    macaddr_t address;
});

__PACKDEF(ezs_evt_system_error_t,
{
    uint16_t error;
});

__PACKDEF(ezs_evt_system_factory_reset_complete_t,
{
});

__PACKDEF(ezs_evt_system_factory_test_entered_t,
{
    uint32_t app;
    uint32_t stack;
    uint16_t protocol;
    uint8_t hardware;
    uint8_t cause;
});

__PACKDEF(ezs_evt_system_dump_blob_t,
{
    uint8_t type;
    uint16_t offset;
    uint8a_t data;
});

__PACKDEF(ezs_cmd_dfu_reboot_t,
{
    uint8_t mode;
});

__PACKDEF(ezs_rsp_dfu_reboot_t,
{
    uint16_t result;
});

__PACKDEF(ezs_evt_dfu_boot_t,
{
    uint8_t mode;
    uint8_t valid;
});

__PACKDEF(ezs_evt_dfu_client_status_t,
{
    uint8_t status;
});

__PACKDEF(ezs_cmd_gap_connect_t,
{
    macaddr_t address;
    uint8_t type;
    uint16_t interval;
    uint16_t slave_latency;
    uint16_t supervision_timeout;
    uint16_t scan_interval;
    uint16_t scan_window;
    uint16_t scan_timeout;
});

__PACKDEF(ezs_rsp_gap_connect_t,
{
    uint16_t result;
    uint8_t conn_handle;
});

__PACKDEF(ezs_cmd_gap_cancel_connection_t,
{
});

__PACKDEF(ezs_rsp_gap_cancel_connection_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_update_conn_parameters_t,
{
    uint8_t conn_handle;
    uint16_t interval;
    uint16_t slave_latency;
    uint16_t supervision_timeout;
});

__PACKDEF(ezs_rsp_gap_update_conn_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_send_connupdate_response_t,
{
    uint8_t conn_handle;
    uint8_t response;
});

__PACKDEF(ezs_rsp_gap_send_connupdate_response_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_disconnect_t,
{
    uint8_t conn_handle;
});

__PACKDEF(ezs_rsp_gap_disconnect_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_add_whitelist_entry_t,
{
    macaddr_t address;
    uint8_t type;
});

__PACKDEF(ezs_rsp_gap_add_whitelist_entry_t,
{
    uint16_t result;
    uint8_t count;
});

__PACKDEF(ezs_cmd_gap_delete_whitelist_entry_t,
{
    macaddr_t address;
    uint8_t type;
});

__PACKDEF(ezs_rsp_gap_delete_whitelist_entry_t,
{
    uint16_t result;
    uint8_t count;
});

__PACKDEF(ezs_cmd_gap_start_adv_t,
{
    uint8_t mode;
    uint8_t type;
    uint16_t interval;
    uint8_t channels;
    uint8_t filter;
    uint16_t timeout;
});

__PACKDEF(ezs_rsp_gap_start_adv_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_stop_adv_t,
{
});

__PACKDEF(ezs_rsp_gap_stop_adv_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_start_scan_t,
{
    uint8_t mode;
    uint16_t interval;
    uint16_t window;
    uint8_t active;
    uint8_t filter;
    uint8_t nodupe;
    uint16_t timeout;
});

__PACKDEF(ezs_rsp_gap_start_scan_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_stop_scan_t,
{
});

__PACKDEF(ezs_rsp_gap_stop_scan_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_query_peer_address_t,
{
    uint8_t conn_handle;
});

__PACKDEF(ezs_rsp_gap_query_peer_address_t,
{
    uint16_t result;
    macaddr_t address;
    uint8_t address_type;
});

__PACKDEF(ezs_cmd_gap_query_rssi_t,
{
    uint8_t conn_handle;
});

__PACKDEF(ezs_rsp_gap_query_rssi_t,
{
    uint16_t result;
    int8_t rssi;
});

__PACKDEF(ezs_cmd_gap_query_whitelist_t,
{
});

__PACKDEF(ezs_rsp_gap_query_whitelist_t,
{
    uint16_t result;
    uint8_t count;
});

__PACKDEF(ezs_cmd_gap_set_device_name_t,
{
    uint8a_t name;
});

__PACKDEF(ezs_rsp_gap_set_device_name_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_get_device_name_t,
{
});

__PACKDEF(ezs_rsp_gap_get_device_name_t,
{
    uint16_t result;
    uint8a_t name;
});

__PACKDEF(ezs_cmd_gap_set_device_appearance_t,
{
    uint16_t appearance;
});

__PACKDEF(ezs_rsp_gap_set_device_appearance_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_get_device_appearance_t,
{
});

__PACKDEF(ezs_rsp_gap_get_device_appearance_t,
{
    uint16_t result;
    uint16_t appearance;
});

__PACKDEF(ezs_cmd_gap_set_adv_data_t,
{
    uint8a_t data;
});

__PACKDEF(ezs_rsp_gap_set_adv_data_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_get_adv_data_t,
{
});

__PACKDEF(ezs_rsp_gap_get_adv_data_t,
{
    uint16_t result;
    uint8a_t data;
});

__PACKDEF(ezs_cmd_gap_set_sr_data_t,
{
    uint8a_t data;
});

__PACKDEF(ezs_rsp_gap_set_sr_data_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_get_sr_data_t,
{
});

__PACKDEF(ezs_rsp_gap_get_sr_data_t,
{
    uint16_t result;
    uint8a_t data;
});

__PACKDEF(ezs_cmd_gap_set_adv_parameters_t,
{
    uint8_t mode;
    uint8_t type;
    uint16_t interval;
    uint8_t channels;
    uint8_t filter;
    uint16_t timeout;
    uint8_t flags;
});

__PACKDEF(ezs_rsp_gap_set_adv_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_get_adv_parameters_t,
{
});

__PACKDEF(ezs_rsp_gap_get_adv_parameters_t,
{
    uint16_t result;
    uint8_t mode;
    uint8_t type;
    uint16_t interval;
    uint8_t channels;
    uint8_t filter;
    uint16_t timeout;
    uint8_t flags;
});

__PACKDEF(ezs_cmd_gap_set_scan_parameters_t,
{
    uint8_t mode;
    uint16_t interval;
    uint16_t window;
    uint8_t active;
    uint8_t filter;
    uint8_t nodupe;
    uint16_t timeout;
});

__PACKDEF(ezs_rsp_gap_set_scan_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_get_scan_parameters_t,
{
});

__PACKDEF(ezs_rsp_gap_get_scan_parameters_t,
{
    uint16_t result;
    uint8_t mode;
    uint16_t interval;
    uint16_t window;
    uint8_t active;
    uint8_t filter;
    uint8_t nodupe;
    uint16_t timeout;
});

__PACKDEF(ezs_cmd_gap_set_conn_parameters_t,
{
    uint16_t interval;
    uint16_t slave_latency;
    uint16_t supervision_timeout;
    uint16_t scan_interval;
    uint16_t scan_window;
    uint16_t scan_timeout;
});

__PACKDEF(ezs_rsp_gap_set_conn_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gap_get_conn_parameters_t,
{
});

__PACKDEF(ezs_rsp_gap_get_conn_parameters_t,
{
    uint16_t result;
    uint16_t interval;
    uint16_t slave_latency;
    uint16_t supervision_timeout;
    uint16_t scan_interval;
    uint16_t scan_window;
    uint16_t scan_timeout;
});

__PACKDEF(ezs_evt_gap_whitelist_entry_t,
{
    macaddr_t address;
    uint8_t type;
});

__PACKDEF(ezs_evt_gap_adv_state_changed_t,
{
    uint8_t state;
    uint8_t reason;
});

__PACKDEF(ezs_evt_gap_scan_state_changed_t,
{
    uint8_t state;
    uint8_t reason;
});

__PACKDEF(ezs_evt_gap_scan_result_t,
{
    uint8_t result_type;
    macaddr_t address;
    uint8_t address_type;
    int8_t rssi;
    uint8_t bond;
    uint8a_t data;
});

__PACKDEF(ezs_evt_gap_connected_t,
{
    uint8_t conn_handle;
    macaddr_t address;
    uint8_t type;
    uint16_t interval;
    uint16_t slave_latency;
    uint16_t supervision_timeout;
    uint8_t bond;
});

__PACKDEF(ezs_evt_gap_disconnected_t,
{
    uint8_t conn_handle;
    uint16_t reason;
});

__PACKDEF(ezs_evt_gap_connection_update_requested_t,
{
    uint8_t conn_handle;
    uint16_t interval_min;
    uint16_t interval_max;
    uint16_t slave_latency;
    uint16_t supervision_timeout;
});

__PACKDEF(ezs_evt_gap_connection_updated_t,
{
    uint8_t conn_handle;
    uint16_t interval;
    uint16_t slave_latency;
    uint16_t supervision_timeout;
});

__PACKDEF(ezs_cmd_gatts_create_attr_t,
{
    uint16_t type;
    uint8_t read_permissions;
    uint8_t write_permissions;
    uint8_t char_properties;
    uint16_t length;
    longuint8a_t data;
});

__PACKDEF(ezs_rsp_gatts_create_attr_t,
{
    uint16_t result;
    uint16_t attr_handle;
    uint16_t valid;
});

__PACKDEF(ezs_cmd_gatts_delete_attr_t,
{
    uint16_t attr_handle;
});

__PACKDEF(ezs_rsp_gatts_delete_attr_t,
{
    uint16_t result;
    uint16_t count;
    uint16_t next_handle;
    uint16_t valid;
});

__PACKDEF(ezs_cmd_gatts_validate_db_t,
{
});

__PACKDEF(ezs_rsp_gatts_validate_db_t,
{
    uint16_t result;
    uint16_t valid;
});

__PACKDEF(ezs_cmd_gatts_store_db_t,
{
});

__PACKDEF(ezs_rsp_gatts_store_db_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gatts_dump_db_t,
{
    uint8_t include_fixed;
});

__PACKDEF(ezs_rsp_gatts_dump_db_t,
{
    uint16_t result;
    uint16_t count;
});

__PACKDEF(ezs_cmd_gatts_discover_services_t,
{
    uint16_t begin;
    uint16_t end;
});

__PACKDEF(ezs_rsp_gatts_discover_services_t,
{
    uint16_t result;
    uint16_t count;
});

__PACKDEF(ezs_cmd_gatts_discover_characteristics_t,
{
    uint16_t begin;
    uint16_t end;
    uint16_t service;
});

__PACKDEF(ezs_rsp_gatts_discover_characteristics_t,
{
    uint16_t result;
    uint16_t count;
});

__PACKDEF(ezs_cmd_gatts_discover_descriptors_t,
{
    uint16_t begin;
    uint16_t end;
    uint16_t service;
    uint16_t characteristic;
});

__PACKDEF(ezs_rsp_gatts_discover_descriptors_t,
{
    uint16_t result;
    uint16_t count;
});

__PACKDEF(ezs_cmd_gatts_read_handle_t,
{
    uint16_t attr_handle;
});

__PACKDEF(ezs_rsp_gatts_read_handle_t,
{
    uint16_t result;
    longuint8a_t data;
});

__PACKDEF(ezs_cmd_gatts_write_handle_t,
{
    uint16_t attr_handle;
    longuint8a_t data;
});

__PACKDEF(ezs_rsp_gatts_write_handle_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gatts_notify_handle_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
    uint8a_t data;
});

__PACKDEF(ezs_rsp_gatts_notify_handle_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gatts_indicate_handle_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
    uint8a_t data;
});

__PACKDEF(ezs_rsp_gatts_indicate_handle_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gatts_send_writereq_response_t,
{
    uint8_t conn_handle;
    uint8_t response;
});

__PACKDEF(ezs_rsp_gatts_send_writereq_response_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gatts_set_parameters_t,
{
    uint8_t flags;
});

__PACKDEF(ezs_rsp_gatts_set_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gatts_get_parameters_t,
{
});

__PACKDEF(ezs_rsp_gatts_get_parameters_t,
{
    uint16_t result;
    uint8_t flags;
});

__PACKDEF(ezs_evt_gatts_discover_result_t,
{
    uint16_t attr_handle;
    uint16_t attr_handle_rel;
    uint16_t type;
    uint8_t properties;
    uint8a_t uuid;
});

__PACKDEF(ezs_evt_gatts_data_written_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
    uint8_t type;
    longuint8a_t data;
});

__PACKDEF(ezs_evt_gatts_indication_confirmed_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
});

__PACKDEF(ezs_evt_gatts_db_entry_blob_t,
{
    uint16_t attr_handle;
    uint16_t type;
    uint8_t read_permissions;
    uint8_t write_permissions;
    uint8_t char_properties;
    uint16_t length;
    longuint8a_t data;
});

__PACKDEF(ezs_cmd_gattc_discover_services_t,
{
    uint8_t conn_handle;
    uint16_t begin;
    uint16_t end;
});

__PACKDEF(ezs_rsp_gattc_discover_services_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gattc_discover_characteristics_t,
{
    uint8_t conn_handle;
    uint16_t begin;
    uint16_t end;
    uint16_t service;
});

__PACKDEF(ezs_rsp_gattc_discover_characteristics_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gattc_discover_descriptors_t,
{
    uint8_t conn_handle;
    uint16_t begin;
    uint16_t end;
    uint16_t service;
    uint16_t characteristic;
});

__PACKDEF(ezs_rsp_gattc_discover_descriptors_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gattc_read_handle_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
});

__PACKDEF(ezs_rsp_gattc_read_handle_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gattc_write_handle_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
    uint8_t type;
    longuint8a_t data;
});

__PACKDEF(ezs_rsp_gattc_write_handle_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gattc_confirm_indication_t,
{
    uint8_t conn_handle;
});

__PACKDEF(ezs_rsp_gattc_confirm_indication_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gattc_set_parameters_t,
{
    uint8_t flags;
});

__PACKDEF(ezs_rsp_gattc_set_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gattc_get_parameters_t,
{
});

__PACKDEF(ezs_rsp_gattc_get_parameters_t,
{
    uint16_t result;
    uint8_t flags;
});

__PACKDEF(ezs_evt_gattc_discover_result_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
    uint16_t attr_handle_rel;
    uint16_t type;
    uint8_t properties;
    uint8a_t uuid;
});

__PACKDEF(ezs_evt_gattc_remote_procedure_complete_t,
{
    uint8_t conn_handle;
    uint16_t result;
});

__PACKDEF(ezs_evt_gattc_data_received_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
    uint8_t source;
    longuint8a_t data;
});

__PACKDEF(ezs_evt_gattc_write_response_t,
{
    uint8_t conn_handle;
    uint16_t attr_handle;
    uint16_t result;
});

__PACKDEF(ezs_cmd_smp_query_bonds_t,
{
});

__PACKDEF(ezs_rsp_smp_query_bonds_t,
{
    uint16_t result;
    uint8_t count;
});

__PACKDEF(ezs_cmd_smp_delete_bond_t,
{
    macaddr_t address;
    uint8_t type;
});

__PACKDEF(ezs_rsp_smp_delete_bond_t,
{
    uint16_t result;
    uint8_t count;
});

__PACKDEF(ezs_cmd_smp_pair_t,
{
    uint8_t conn_handle;
    uint8_t mode;
    uint8_t bonding;
    uint8_t keysize;
    uint8_t pairprop;
});

__PACKDEF(ezs_rsp_smp_pair_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_smp_query_random_address_t,
{
});

__PACKDEF(ezs_rsp_smp_query_random_address_t,
{
    uint16_t result;
    macaddr_t address;
});

__PACKDEF(ezs_cmd_smp_send_pairreq_response_t,
{
    uint8_t conn_handle;
    uint16_t response;
});

__PACKDEF(ezs_rsp_smp_send_pairreq_response_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_smp_send_passkeyreq_response_t,
{
    uint8_t conn_handle;
    uint32_t passkey;
});

__PACKDEF(ezs_rsp_smp_send_passkeyreq_response_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_smp_generate_oob_data_t,
{
    uint8_t conn_handle;
    uint8a_t key;
});

__PACKDEF(ezs_rsp_smp_generate_oob_data_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_smp_clear_oob_data_t,
{
    uint8_t conn_handle;
});

__PACKDEF(ezs_rsp_smp_clear_oob_data_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_smp_set_privacy_mode_t,
{
    uint8_t mode;
    uint16_t interval;
});

__PACKDEF(ezs_rsp_smp_set_privacy_mode_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_smp_get_privacy_mode_t,
{
});

__PACKDEF(ezs_rsp_smp_get_privacy_mode_t,
{
    uint16_t result;
    uint8_t mode;
    uint16_t interval;
});

__PACKDEF(ezs_cmd_smp_set_security_parameters_t,
{
    uint8_t mode;
    uint8_t bonding;
    uint8_t keysize;
    uint8_t pairprop;
    uint8_t io;
    uint8_t flags;
});

__PACKDEF(ezs_rsp_smp_set_security_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_smp_get_security_parameters_t,
{
});

__PACKDEF(ezs_rsp_smp_get_security_parameters_t,
{
    uint16_t result;
    uint8_t mode;
    uint8_t bonding;
    uint8_t keysize;
    uint8_t pairprop;
    uint8_t io;
    uint8_t flags;
});

__PACKDEF(ezs_evt_smp_bond_entry_t,
{
    uint8_t handle;
    macaddr_t address;
    uint8_t type;
});

__PACKDEF(ezs_evt_smp_pairing_requested_t,
{
    uint8_t conn_handle;
    uint8_t mode;
    uint8_t bonding;
    uint8_t keysize;
    uint8_t pairprop;
});

__PACKDEF(ezs_evt_smp_pairing_result_t,
{
    uint8_t conn_handle;
    uint16_t result;
});

__PACKDEF(ezs_evt_smp_encryption_status_t,
{
    uint8_t conn_handle;
    uint8_t status;
});

__PACKDEF(ezs_evt_smp_passkey_display_requested_t,
{
    uint8_t conn_handle;
    uint32_t passkey;
});

__PACKDEF(ezs_evt_smp_passkey_entry_requested_t,
{
    uint8_t conn_handle;
});

__PACKDEF(ezs_cmd_l2cap_connect_t,
{
    uint8_t conn_handle;
    uint16_t remote;
    uint16_t local;
    uint16_t mtu;
    uint16_t mps;
    uint16_t credits;
});

__PACKDEF(ezs_rsp_l2cap_connect_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_l2cap_disconnect_t,
{
    uint16_t channel;
});

__PACKDEF(ezs_rsp_l2cap_disconnect_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_l2cap_register_psm_t,
{
    uint16_t channel;
    uint16_t watermark;
});

__PACKDEF(ezs_rsp_l2cap_register_psm_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_l2cap_send_connreq_response_t,
{
    uint8_t conn_handle;
    uint16_t channel;
    uint16_t response;
    uint16_t mtu;
    uint16_t mps;
    uint16_t credits;
});

__PACKDEF(ezs_rsp_l2cap_send_connreq_response_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_l2cap_send_credits_t,
{
    uint16_t channel;
    uint16_t credits;
});

__PACKDEF(ezs_rsp_l2cap_send_credits_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_l2cap_send_data_t,
{
    uint8_t conn_handle;
    uint16_t channel;
    longuint8a_t data;
});

__PACKDEF(ezs_rsp_l2cap_send_data_t,
{
    uint16_t result;
});

__PACKDEF(ezs_evt_l2cap_connection_requested_t,
{
    uint8_t conn_handle;
    uint16_t channel;
    uint16_t local;
    uint16_t mtu;
    uint16_t mps;
    uint16_t credits;
});

__PACKDEF(ezs_evt_l2cap_connection_response_t,
{
    uint8_t conn_handle;
    uint16_t response;
    uint16_t channel;
    uint16_t mtu;
    uint16_t mps;
    uint16_t credits;
});

__PACKDEF(ezs_evt_l2cap_data_received_t,
{
    uint16_t channel;
    longuint8a_t data;
});

__PACKDEF(ezs_evt_l2cap_disconnected_t,
{
    uint8_t conn_handle;
    uint16_t channel;
    uint16_t reason;
});

__PACKDEF(ezs_evt_l2cap_rx_credits_low_t,
{
    uint8_t conn_handle;
    uint16_t channel;
    uint16_t credits;
});

__PACKDEF(ezs_evt_l2cap_tx_credits_received_t,
{
    uint8_t conn_handle;
    uint16_t channel;
    uint16_t credits;
});

__PACKDEF(ezs_evt_l2cap_command_rejected_t,
{
    uint8_t conn_handle;
    uint16_t channel;
    uint16_t reason;
});

__PACKDEF(ezs_cmd_gpio_query_logic_t,
{
    uint8_t port;
});

__PACKDEF(ezs_rsp_gpio_query_logic_t,
{
    uint16_t result;
    uint8_t logic;
});

__PACKDEF(ezs_cmd_gpio_query_adc_t,
{
    uint8_t channel;
    uint8_t reference;
});

__PACKDEF(ezs_rsp_gpio_query_adc_t,
{
    uint16_t result;
    uint16_t value;
    uint32_t uvolts;
});

__PACKDEF(ezs_cmd_gpio_set_function_t,
{
    uint8_t port;
    uint8_t mask;
    uint8_t enable;
    uint8_t drive;
});

__PACKDEF(ezs_rsp_gpio_set_function_t,
{
    uint16_t result;
    uint8_t affected;
});

__PACKDEF(ezs_cmd_gpio_get_function_t,
{
    uint8_t port;
});

__PACKDEF(ezs_rsp_gpio_get_function_t,
{
    uint16_t result;
    uint8_t enable;
    uint8_t drive;
});

__PACKDEF(ezs_cmd_gpio_set_drive_t,
{
    uint8_t port;
    uint8_t mask;
    uint8_t direction;
    uint8_t pulldrive_down;
    uint8_t pulldrive_up;
    uint8_t analog;
});

__PACKDEF(ezs_rsp_gpio_set_drive_t,
{
    uint16_t result;
    uint8_t affected;
});

__PACKDEF(ezs_cmd_gpio_get_drive_t,
{
    uint8_t port;
});

__PACKDEF(ezs_rsp_gpio_get_drive_t,
{
    uint16_t result;
    uint8_t direction;
    uint8_t pulldrive_down;
    uint8_t pulldrive_up;
    uint8_t analog;
});

__PACKDEF(ezs_cmd_gpio_set_logic_t,
{
    uint8_t port;
    uint8_t mask;
    uint8_t logic;
});

__PACKDEF(ezs_rsp_gpio_set_logic_t,
{
    uint16_t result;
    uint8_t affected;
});

__PACKDEF(ezs_cmd_gpio_get_logic_t,
{
    uint8_t port;
});

__PACKDEF(ezs_rsp_gpio_get_logic_t,
{
    uint16_t result;
    uint8_t logic;
});

__PACKDEF(ezs_cmd_gpio_set_interrupt_mode_t,
{
    uint8_t port;
    uint8_t mask;
    uint8_t rising;
    uint8_t falling;
});

__PACKDEF(ezs_rsp_gpio_set_interrupt_mode_t,
{
    uint16_t result;
    uint8_t affected;
});

__PACKDEF(ezs_cmd_gpio_get_interrupt_mode_t,
{
    uint8_t port;
});

__PACKDEF(ezs_rsp_gpio_get_interrupt_mode_t,
{
    uint16_t result;
    uint8_t rising;
    uint8_t falling;
});

__PACKDEF(ezs_cmd_gpio_set_pwm_mode_t,
{
    uint8_t channel;
    uint8_t enable;
    uint8_t divider;
    uint8_t prescaler;
    uint16_t period;
    uint16_t compare;
});

__PACKDEF(ezs_rsp_gpio_set_pwm_mode_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_gpio_get_pwm_mode_t,
{
    uint8_t channel;
});

__PACKDEF(ezs_rsp_gpio_get_pwm_mode_t,
{
    uint16_t result;
    uint8_t enable;
    uint8_t divider;
    uint8_t prescaler;
    uint16_t period;
    uint16_t compare;
});

__PACKDEF(ezs_evt_gpio_interrupt_t,
{
    uint8_t port;
    uint8_t trigger;
    uint8_t logic;
    uint32_t runtime;
    uint16_t fraction;
});

__PACKDEF(ezs_cmd_p_cyspp_check_t,
{
});

__PACKDEF(ezs_rsp_p_cyspp_check_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_p_cyspp_start_t,
{
});

__PACKDEF(ezs_rsp_p_cyspp_start_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_p_cyspp_set_parameters_t,
{
    uint8_t enable;
    uint8_t role;
    uint16_t company;
    uint32_t local_key;
    uint32_t remote_key;
    uint32_t remote_mask;
    uint8_t sleep_level;
    uint8_t server_security;
    uint8_t client_flags;
});

__PACKDEF(ezs_rsp_p_cyspp_set_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_p_cyspp_get_parameters_t,
{
});

__PACKDEF(ezs_rsp_p_cyspp_get_parameters_t,
{
    uint16_t result;
    uint8_t enable;
    uint8_t role;
    uint16_t company;
    uint32_t local_key;
    uint32_t remote_key;
    uint32_t remote_mask;
    uint8_t sleep_level;
    uint8_t server_security;
    uint8_t client_flags;
});

__PACKDEF(ezs_cmd_p_cyspp_set_client_handles_t,
{
    uint16_t data_value_handle;
    uint16_t data_cccd_handle;
    uint16_t rxflow_value_handle;
    uint16_t rxflow_cccd_handle;
});

__PACKDEF(ezs_rsp_p_cyspp_set_client_handles_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_p_cyspp_get_client_handles_t,
{
});

__PACKDEF(ezs_rsp_p_cyspp_get_client_handles_t,
{
    uint16_t result;
    uint16_t data_value_handle;
    uint16_t data_cccd_handle;
    uint16_t rxflow_value_handle;
    uint16_t rxflow_cccd_handle;
});

__PACKDEF(ezs_cmd_p_cyspp_set_packetization_t,
{
    uint8_t mode;
    uint8_t wait;
    uint8_t length;
    uint8_t eop;
});

__PACKDEF(ezs_rsp_p_cyspp_set_packetization_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_p_cyspp_get_packetization_t,
{
});

__PACKDEF(ezs_rsp_p_cyspp_get_packetization_t,
{
    uint16_t result;
    uint8_t mode;
    uint8_t wait;
    uint8_t length;
    uint8_t eop;
});

__PACKDEF(ezs_evt_p_cyspp_status_t,
{
    uint8_t status;
});

__PACKDEF(ezs_cmd_p_cycommand_set_parameters_t,
{
    uint8_t enable;
    uint8_t hostout;
    uint16_t timeout;
    uint8_t safemode;
    uint8_t challenge;
    uint8_t security;
    uint8a_t secret;
});

__PACKDEF(ezs_rsp_p_cycommand_set_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_p_cycommand_get_parameters_t,
{
});

__PACKDEF(ezs_rsp_p_cycommand_get_parameters_t,
{
    uint16_t result;
    uint8_t enable;
    uint8_t hostout;
    uint16_t timeout;
    uint8_t safemode;
    uint8_t challenge;
    uint8_t security;
    uint8a_t secret;
});

__PACKDEF(ezs_evt_p_cycommand_status_t,
{
    uint8_t status;
});

__PACKDEF(ezs_cmd_p_ibeacon_set_parameters_t,
{
    uint8_t enable;
    uint16_t interval;
    uint16_t company;
    uint16_t major;
    uint16_t minor;
    uint8a_t uuid;
});

__PACKDEF(ezs_rsp_p_ibeacon_set_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_p_ibeacon_get_parameters_t,
{
});

__PACKDEF(ezs_rsp_p_ibeacon_get_parameters_t,
{
    uint16_t result;
    uint8_t enable;
    uint16_t interval;
    uint16_t company;
    uint16_t major;
    uint16_t minor;
    uint8a_t uuid;
});

__PACKDEF(ezs_cmd_p_eddystone_set_parameters_t,
{
    uint8_t enable;
    uint16_t interval;
    uint8_t type;
    uint8a_t data;
});

__PACKDEF(ezs_rsp_p_eddystone_set_parameters_t,
{
    uint16_t result;
});

__PACKDEF(ezs_cmd_p_eddystone_get_parameters_t,
{
});

__PACKDEF(ezs_rsp_p_eddystone_get_parameters_t,
{
    uint16_t result;
    uint8_t enable;
    uint16_t interval;
    uint8_t type;
    uint8a_t data;
});


/*******************************************************************************
* Structure representing a single entry in the command definition table.
*******************************************************************************/
__PACKDEF(ezs_tbl_cmd_entry_t,
{
    uint8_t group;
    uint8_t id;
    uint8_t length;
    uint8_t arg_count;
    uint8_t arg_type[];
});


/*******************************************************************************
* Structure representing a single entry in the event definition table.
*******************************************************************************/
__PACKDEF(ezs_tbl_evt_entry_t,
{
    uint8_t group;
    uint8_t id;
    uint8_t length;
});


/*******************************************************************************
* Four-byte packet header, present in every packet.
*******************************************************************************/
__PACKDEF(ezs_packet_header_t,
{
    uint8_t type;
    uint8_t length;
    uint8_t group;
    uint8_t id;
});


/*******************************************************************************
* Packet payload, a union of every single possible command, response, and
* event payload structure. By using the correct named union member, you can
* access any payload data structure without needing to use or cast to unique
* struct types.
*******************************************************************************/
typedef union
{
    ezs_rsp_generic_t rsp_generic;
    ezs_cmd_protocol_set_parse_mode_t cmd_protocol_set_parse_mode;
    ezs_rsp_protocol_set_parse_mode_t rsp_protocol_set_parse_mode;
    ezs_cmd_protocol_get_parse_mode_t cmd_protocol_get_parse_mode;
    ezs_rsp_protocol_get_parse_mode_t rsp_protocol_get_parse_mode;
    ezs_cmd_protocol_set_echo_mode_t cmd_protocol_set_echo_mode;
    ezs_rsp_protocol_set_echo_mode_t rsp_protocol_set_echo_mode;
    ezs_cmd_protocol_get_echo_mode_t cmd_protocol_get_echo_mode;
    ezs_rsp_protocol_get_echo_mode_t rsp_protocol_get_echo_mode;
    ezs_cmd_system_ping_t cmd_system_ping;
    ezs_rsp_system_ping_t rsp_system_ping;
    ezs_cmd_system_reboot_t cmd_system_reboot;
    ezs_rsp_system_reboot_t rsp_system_reboot;
    ezs_cmd_system_dump_t cmd_system_dump;
    ezs_rsp_system_dump_t rsp_system_dump;
    ezs_cmd_system_store_config_t cmd_system_store_config;
    ezs_rsp_system_store_config_t rsp_system_store_config;
    ezs_cmd_system_factory_reset_t cmd_system_factory_reset;
    ezs_rsp_system_factory_reset_t rsp_system_factory_reset;
    ezs_cmd_system_query_firmware_version_t cmd_system_query_firmware_version;
    ezs_rsp_system_query_firmware_version_t rsp_system_query_firmware_version;
    ezs_cmd_system_query_unique_id_t cmd_system_query_unique_id;
    ezs_rsp_system_query_unique_id_t rsp_system_query_unique_id;
    ezs_cmd_system_query_random_number_t cmd_system_query_random_number;
    ezs_rsp_system_query_random_number_t rsp_system_query_random_number;
    ezs_cmd_system_aes_encrypt_t cmd_system_aes_encrypt;
    ezs_rsp_system_aes_encrypt_t rsp_system_aes_encrypt;
    ezs_cmd_system_aes_decrypt_t cmd_system_aes_decrypt;
    ezs_rsp_system_aes_decrypt_t rsp_system_aes_decrypt;
    ezs_cmd_system_write_user_data_t cmd_system_write_user_data;
    ezs_rsp_system_write_user_data_t rsp_system_write_user_data;
    ezs_cmd_system_read_user_data_t cmd_system_read_user_data;
    ezs_rsp_system_read_user_data_t rsp_system_read_user_data;
    ezs_cmd_system_set_bluetooth_address_t cmd_system_set_bluetooth_address;
    ezs_rsp_system_set_bluetooth_address_t rsp_system_set_bluetooth_address;
    ezs_cmd_system_get_bluetooth_address_t cmd_system_get_bluetooth_address;
    ezs_rsp_system_get_bluetooth_address_t rsp_system_get_bluetooth_address;
    ezs_cmd_system_set_eco_parameters_t cmd_system_set_eco_parameters;
    ezs_rsp_system_set_eco_parameters_t rsp_system_set_eco_parameters;
    ezs_cmd_system_get_eco_parameters_t cmd_system_get_eco_parameters;
    ezs_rsp_system_get_eco_parameters_t rsp_system_get_eco_parameters;
    ezs_cmd_system_set_wco_parameters_t cmd_system_set_wco_parameters;
    ezs_rsp_system_set_wco_parameters_t rsp_system_set_wco_parameters;
    ezs_cmd_system_get_wco_parameters_t cmd_system_get_wco_parameters;
    ezs_rsp_system_get_wco_parameters_t rsp_system_get_wco_parameters;
    ezs_cmd_system_set_sleep_parameters_t cmd_system_set_sleep_parameters;
    ezs_rsp_system_set_sleep_parameters_t rsp_system_set_sleep_parameters;
    ezs_cmd_system_get_sleep_parameters_t cmd_system_get_sleep_parameters;
    ezs_rsp_system_get_sleep_parameters_t rsp_system_get_sleep_parameters;
    ezs_cmd_system_set_tx_power_t cmd_system_set_tx_power;
    ezs_rsp_system_set_tx_power_t rsp_system_set_tx_power;
    ezs_cmd_system_get_tx_power_t cmd_system_get_tx_power;
    ezs_rsp_system_get_tx_power_t rsp_system_get_tx_power;
    ezs_cmd_system_set_transport_t cmd_system_set_transport;
    ezs_rsp_system_set_transport_t rsp_system_set_transport;
    ezs_cmd_system_get_transport_t cmd_system_get_transport;
    ezs_rsp_system_get_transport_t rsp_system_get_transport;
    ezs_cmd_system_set_uart_parameters_t cmd_system_set_uart_parameters;
    ezs_rsp_system_set_uart_parameters_t rsp_system_set_uart_parameters;
    ezs_cmd_system_get_uart_parameters_t cmd_system_get_uart_parameters;
    ezs_rsp_system_get_uart_parameters_t rsp_system_get_uart_parameters;
    ezs_evt_system_boot_t evt_system_boot;
    ezs_evt_system_error_t evt_system_error;
    ezs_evt_system_factory_reset_complete_t evt_system_factory_reset_complete;
    ezs_evt_system_factory_test_entered_t evt_system_factory_test_entered;
    ezs_evt_system_dump_blob_t evt_system_dump_blob;
    ezs_cmd_dfu_reboot_t cmd_dfu_reboot;
    ezs_rsp_dfu_reboot_t rsp_dfu_reboot;
    ezs_evt_dfu_boot_t evt_dfu_boot;
    ezs_evt_dfu_client_status_t evt_dfu_client_status;
    ezs_cmd_gap_connect_t cmd_gap_connect;
    ezs_rsp_gap_connect_t rsp_gap_connect;
    ezs_cmd_gap_cancel_connection_t cmd_gap_cancel_connection;
    ezs_rsp_gap_cancel_connection_t rsp_gap_cancel_connection;
    ezs_cmd_gap_update_conn_parameters_t cmd_gap_update_conn_parameters;
    ezs_rsp_gap_update_conn_parameters_t rsp_gap_update_conn_parameters;
    ezs_cmd_gap_send_connupdate_response_t cmd_gap_send_connupdate_response;
    ezs_rsp_gap_send_connupdate_response_t rsp_gap_send_connupdate_response;
    ezs_cmd_gap_disconnect_t cmd_gap_disconnect;
    ezs_rsp_gap_disconnect_t rsp_gap_disconnect;
    ezs_cmd_gap_add_whitelist_entry_t cmd_gap_add_whitelist_entry;
    ezs_rsp_gap_add_whitelist_entry_t rsp_gap_add_whitelist_entry;
    ezs_cmd_gap_delete_whitelist_entry_t cmd_gap_delete_whitelist_entry;
    ezs_rsp_gap_delete_whitelist_entry_t rsp_gap_delete_whitelist_entry;
    ezs_cmd_gap_start_adv_t cmd_gap_start_adv;
    ezs_rsp_gap_start_adv_t rsp_gap_start_adv;
    ezs_cmd_gap_stop_adv_t cmd_gap_stop_adv;
    ezs_rsp_gap_stop_adv_t rsp_gap_stop_adv;
    ezs_cmd_gap_start_scan_t cmd_gap_start_scan;
    ezs_rsp_gap_start_scan_t rsp_gap_start_scan;
    ezs_cmd_gap_stop_scan_t cmd_gap_stop_scan;
    ezs_rsp_gap_stop_scan_t rsp_gap_stop_scan;
    ezs_cmd_gap_query_peer_address_t cmd_gap_query_peer_address;
    ezs_rsp_gap_query_peer_address_t rsp_gap_query_peer_address;
    ezs_cmd_gap_query_rssi_t cmd_gap_query_rssi;
    ezs_rsp_gap_query_rssi_t rsp_gap_query_rssi;
    ezs_cmd_gap_query_whitelist_t cmd_gap_query_whitelist;
    ezs_rsp_gap_query_whitelist_t rsp_gap_query_whitelist;
    ezs_cmd_gap_set_device_name_t cmd_gap_set_device_name;
    ezs_rsp_gap_set_device_name_t rsp_gap_set_device_name;
    ezs_cmd_gap_get_device_name_t cmd_gap_get_device_name;
    ezs_rsp_gap_get_device_name_t rsp_gap_get_device_name;
    ezs_cmd_gap_set_device_appearance_t cmd_gap_set_device_appearance;
    ezs_rsp_gap_set_device_appearance_t rsp_gap_set_device_appearance;
    ezs_cmd_gap_get_device_appearance_t cmd_gap_get_device_appearance;
    ezs_rsp_gap_get_device_appearance_t rsp_gap_get_device_appearance;
    ezs_cmd_gap_set_adv_data_t cmd_gap_set_adv_data;
    ezs_rsp_gap_set_adv_data_t rsp_gap_set_adv_data;
    ezs_cmd_gap_get_adv_data_t cmd_gap_get_adv_data;
    ezs_rsp_gap_get_adv_data_t rsp_gap_get_adv_data;
    ezs_cmd_gap_set_sr_data_t cmd_gap_set_sr_data;
    ezs_rsp_gap_set_sr_data_t rsp_gap_set_sr_data;
    ezs_cmd_gap_get_sr_data_t cmd_gap_get_sr_data;
    ezs_rsp_gap_get_sr_data_t rsp_gap_get_sr_data;
    ezs_cmd_gap_set_adv_parameters_t cmd_gap_set_adv_parameters;
    ezs_rsp_gap_set_adv_parameters_t rsp_gap_set_adv_parameters;
    ezs_cmd_gap_get_adv_parameters_t cmd_gap_get_adv_parameters;
    ezs_rsp_gap_get_adv_parameters_t rsp_gap_get_adv_parameters;
    ezs_cmd_gap_set_scan_parameters_t cmd_gap_set_scan_parameters;
    ezs_rsp_gap_set_scan_parameters_t rsp_gap_set_scan_parameters;
    ezs_cmd_gap_get_scan_parameters_t cmd_gap_get_scan_parameters;
    ezs_rsp_gap_get_scan_parameters_t rsp_gap_get_scan_parameters;
    ezs_cmd_gap_set_conn_parameters_t cmd_gap_set_conn_parameters;
    ezs_rsp_gap_set_conn_parameters_t rsp_gap_set_conn_parameters;
    ezs_cmd_gap_get_conn_parameters_t cmd_gap_get_conn_parameters;
    ezs_rsp_gap_get_conn_parameters_t rsp_gap_get_conn_parameters;
    ezs_evt_gap_whitelist_entry_t evt_gap_whitelist_entry;
    ezs_evt_gap_adv_state_changed_t evt_gap_adv_state_changed;
    ezs_evt_gap_scan_state_changed_t evt_gap_scan_state_changed;
    ezs_evt_gap_scan_result_t evt_gap_scan_result;
    ezs_evt_gap_connected_t evt_gap_connected;
    ezs_evt_gap_disconnected_t evt_gap_disconnected;
    ezs_evt_gap_connection_update_requested_t evt_gap_connection_update_requested;
    ezs_evt_gap_connection_updated_t evt_gap_connection_updated;
    ezs_cmd_gatts_create_attr_t cmd_gatts_create_attr;
    ezs_rsp_gatts_create_attr_t rsp_gatts_create_attr;
    ezs_cmd_gatts_delete_attr_t cmd_gatts_delete_attr;
    ezs_rsp_gatts_delete_attr_t rsp_gatts_delete_attr;
    ezs_cmd_gatts_validate_db_t cmd_gatts_validate_db;
    ezs_rsp_gatts_validate_db_t rsp_gatts_validate_db;
    ezs_cmd_gatts_store_db_t cmd_gatts_store_db;
    ezs_rsp_gatts_store_db_t rsp_gatts_store_db;
    ezs_cmd_gatts_dump_db_t cmd_gatts_dump_db;
    ezs_rsp_gatts_dump_db_t rsp_gatts_dump_db;
    ezs_cmd_gatts_discover_services_t cmd_gatts_discover_services;
    ezs_rsp_gatts_discover_services_t rsp_gatts_discover_services;
    ezs_cmd_gatts_discover_characteristics_t cmd_gatts_discover_characteristics;
    ezs_rsp_gatts_discover_characteristics_t rsp_gatts_discover_characteristics;
    ezs_cmd_gatts_discover_descriptors_t cmd_gatts_discover_descriptors;
    ezs_rsp_gatts_discover_descriptors_t rsp_gatts_discover_descriptors;
    ezs_cmd_gatts_read_handle_t cmd_gatts_read_handle;
    ezs_rsp_gatts_read_handle_t rsp_gatts_read_handle;
    ezs_cmd_gatts_write_handle_t cmd_gatts_write_handle;
    ezs_rsp_gatts_write_handle_t rsp_gatts_write_handle;
    ezs_cmd_gatts_notify_handle_t cmd_gatts_notify_handle;
    ezs_rsp_gatts_notify_handle_t rsp_gatts_notify_handle;
    ezs_cmd_gatts_indicate_handle_t cmd_gatts_indicate_handle;
    ezs_rsp_gatts_indicate_handle_t rsp_gatts_indicate_handle;
    ezs_cmd_gatts_send_writereq_response_t cmd_gatts_send_writereq_response;
    ezs_rsp_gatts_send_writereq_response_t rsp_gatts_send_writereq_response;
    ezs_cmd_gatts_set_parameters_t cmd_gatts_set_parameters;
    ezs_rsp_gatts_set_parameters_t rsp_gatts_set_parameters;
    ezs_cmd_gatts_get_parameters_t cmd_gatts_get_parameters;
    ezs_rsp_gatts_get_parameters_t rsp_gatts_get_parameters;
    ezs_evt_gatts_discover_result_t evt_gatts_discover_result;
    ezs_evt_gatts_data_written_t evt_gatts_data_written;
    ezs_evt_gatts_indication_confirmed_t evt_gatts_indication_confirmed;
    ezs_evt_gatts_db_entry_blob_t evt_gatts_db_entry_blob;
    ezs_cmd_gattc_discover_services_t cmd_gattc_discover_services;
    ezs_rsp_gattc_discover_services_t rsp_gattc_discover_services;
    ezs_cmd_gattc_discover_characteristics_t cmd_gattc_discover_characteristics;
    ezs_rsp_gattc_discover_characteristics_t rsp_gattc_discover_characteristics;
    ezs_cmd_gattc_discover_descriptors_t cmd_gattc_discover_descriptors;
    ezs_rsp_gattc_discover_descriptors_t rsp_gattc_discover_descriptors;
    ezs_cmd_gattc_read_handle_t cmd_gattc_read_handle;
    ezs_rsp_gattc_read_handle_t rsp_gattc_read_handle;
    ezs_cmd_gattc_write_handle_t cmd_gattc_write_handle;
    ezs_rsp_gattc_write_handle_t rsp_gattc_write_handle;
    ezs_cmd_gattc_confirm_indication_t cmd_gattc_confirm_indication;
    ezs_rsp_gattc_confirm_indication_t rsp_gattc_confirm_indication;
    ezs_cmd_gattc_set_parameters_t cmd_gattc_set_parameters;
    ezs_rsp_gattc_set_parameters_t rsp_gattc_set_parameters;
    ezs_cmd_gattc_get_parameters_t cmd_gattc_get_parameters;
    ezs_rsp_gattc_get_parameters_t rsp_gattc_get_parameters;
    ezs_evt_gattc_discover_result_t evt_gattc_discover_result;
    ezs_evt_gattc_remote_procedure_complete_t evt_gattc_remote_procedure_complete;
    ezs_evt_gattc_data_received_t evt_gattc_data_received;
    ezs_evt_gattc_write_response_t evt_gattc_write_response;
    ezs_cmd_smp_query_bonds_t cmd_smp_query_bonds;
    ezs_rsp_smp_query_bonds_t rsp_smp_query_bonds;
    ezs_cmd_smp_delete_bond_t cmd_smp_delete_bond;
    ezs_rsp_smp_delete_bond_t rsp_smp_delete_bond;
    ezs_cmd_smp_pair_t cmd_smp_pair;
    ezs_rsp_smp_pair_t rsp_smp_pair;
    ezs_cmd_smp_query_random_address_t cmd_smp_query_random_address;
    ezs_rsp_smp_query_random_address_t rsp_smp_query_random_address;
    ezs_cmd_smp_send_pairreq_response_t cmd_smp_send_pairreq_response;
    ezs_rsp_smp_send_pairreq_response_t rsp_smp_send_pairreq_response;
    ezs_cmd_smp_send_passkeyreq_response_t cmd_smp_send_passkeyreq_response;
    ezs_rsp_smp_send_passkeyreq_response_t rsp_smp_send_passkeyreq_response;
    ezs_cmd_smp_generate_oob_data_t cmd_smp_generate_oob_data;
    ezs_rsp_smp_generate_oob_data_t rsp_smp_generate_oob_data;
    ezs_cmd_smp_clear_oob_data_t cmd_smp_clear_oob_data;
    ezs_rsp_smp_clear_oob_data_t rsp_smp_clear_oob_data;
    ezs_cmd_smp_set_privacy_mode_t cmd_smp_set_privacy_mode;
    ezs_rsp_smp_set_privacy_mode_t rsp_smp_set_privacy_mode;
    ezs_cmd_smp_get_privacy_mode_t cmd_smp_get_privacy_mode;
    ezs_rsp_smp_get_privacy_mode_t rsp_smp_get_privacy_mode;
    ezs_cmd_smp_set_security_parameters_t cmd_smp_set_security_parameters;
    ezs_rsp_smp_set_security_parameters_t rsp_smp_set_security_parameters;
    ezs_cmd_smp_get_security_parameters_t cmd_smp_get_security_parameters;
    ezs_rsp_smp_get_security_parameters_t rsp_smp_get_security_parameters;
    ezs_evt_smp_bond_entry_t evt_smp_bond_entry;
    ezs_evt_smp_pairing_requested_t evt_smp_pairing_requested;
    ezs_evt_smp_pairing_result_t evt_smp_pairing_result;
    ezs_evt_smp_encryption_status_t evt_smp_encryption_status;
    ezs_evt_smp_passkey_display_requested_t evt_smp_passkey_display_requested;
    ezs_evt_smp_passkey_entry_requested_t evt_smp_passkey_entry_requested;
    ezs_cmd_l2cap_connect_t cmd_l2cap_connect;
    ezs_rsp_l2cap_connect_t rsp_l2cap_connect;
    ezs_cmd_l2cap_disconnect_t cmd_l2cap_disconnect;
    ezs_rsp_l2cap_disconnect_t rsp_l2cap_disconnect;
    ezs_cmd_l2cap_register_psm_t cmd_l2cap_register_psm;
    ezs_rsp_l2cap_register_psm_t rsp_l2cap_register_psm;
    ezs_cmd_l2cap_send_connreq_response_t cmd_l2cap_send_connreq_response;
    ezs_rsp_l2cap_send_connreq_response_t rsp_l2cap_send_connreq_response;
    ezs_cmd_l2cap_send_credits_t cmd_l2cap_send_credits;
    ezs_rsp_l2cap_send_credits_t rsp_l2cap_send_credits;
    ezs_cmd_l2cap_send_data_t cmd_l2cap_send_data;
    ezs_rsp_l2cap_send_data_t rsp_l2cap_send_data;
    ezs_evt_l2cap_connection_requested_t evt_l2cap_connection_requested;
    ezs_evt_l2cap_connection_response_t evt_l2cap_connection_response;
    ezs_evt_l2cap_data_received_t evt_l2cap_data_received;
    ezs_evt_l2cap_disconnected_t evt_l2cap_disconnected;
    ezs_evt_l2cap_rx_credits_low_t evt_l2cap_rx_credits_low;
    ezs_evt_l2cap_tx_credits_received_t evt_l2cap_tx_credits_received;
    ezs_evt_l2cap_command_rejected_t evt_l2cap_command_rejected;
    ezs_cmd_gpio_query_logic_t cmd_gpio_query_logic;
    ezs_rsp_gpio_query_logic_t rsp_gpio_query_logic;
    ezs_cmd_gpio_query_adc_t cmd_gpio_query_adc;
    ezs_rsp_gpio_query_adc_t rsp_gpio_query_adc;
    ezs_cmd_gpio_set_function_t cmd_gpio_set_function;
    ezs_rsp_gpio_set_function_t rsp_gpio_set_function;
    ezs_cmd_gpio_get_function_t cmd_gpio_get_function;
    ezs_rsp_gpio_get_function_t rsp_gpio_get_function;
    ezs_cmd_gpio_set_drive_t cmd_gpio_set_drive;
    ezs_rsp_gpio_set_drive_t rsp_gpio_set_drive;
    ezs_cmd_gpio_get_drive_t cmd_gpio_get_drive;
    ezs_rsp_gpio_get_drive_t rsp_gpio_get_drive;
    ezs_cmd_gpio_set_logic_t cmd_gpio_set_logic;
    ezs_rsp_gpio_set_logic_t rsp_gpio_set_logic;
    ezs_cmd_gpio_get_logic_t cmd_gpio_get_logic;
    ezs_rsp_gpio_get_logic_t rsp_gpio_get_logic;
    ezs_cmd_gpio_set_interrupt_mode_t cmd_gpio_set_interrupt_mode;
    ezs_rsp_gpio_set_interrupt_mode_t rsp_gpio_set_interrupt_mode;
    ezs_cmd_gpio_get_interrupt_mode_t cmd_gpio_get_interrupt_mode;
    ezs_rsp_gpio_get_interrupt_mode_t rsp_gpio_get_interrupt_mode;
    ezs_cmd_gpio_set_pwm_mode_t cmd_gpio_set_pwm_mode;
    ezs_rsp_gpio_set_pwm_mode_t rsp_gpio_set_pwm_mode;
    ezs_cmd_gpio_get_pwm_mode_t cmd_gpio_get_pwm_mode;
    ezs_rsp_gpio_get_pwm_mode_t rsp_gpio_get_pwm_mode;
    ezs_evt_gpio_interrupt_t evt_gpio_interrupt;
    ezs_cmd_p_cyspp_check_t cmd_p_cyspp_check;
    ezs_rsp_p_cyspp_check_t rsp_p_cyspp_check;
    ezs_cmd_p_cyspp_start_t cmd_p_cyspp_start;
    ezs_rsp_p_cyspp_start_t rsp_p_cyspp_start;
    ezs_cmd_p_cyspp_set_parameters_t cmd_p_cyspp_set_parameters;
    ezs_rsp_p_cyspp_set_parameters_t rsp_p_cyspp_set_parameters;
    ezs_cmd_p_cyspp_get_parameters_t cmd_p_cyspp_get_parameters;
    ezs_rsp_p_cyspp_get_parameters_t rsp_p_cyspp_get_parameters;
    ezs_cmd_p_cyspp_set_client_handles_t cmd_p_cyspp_set_client_handles;
    ezs_rsp_p_cyspp_set_client_handles_t rsp_p_cyspp_set_client_handles;
    ezs_cmd_p_cyspp_get_client_handles_t cmd_p_cyspp_get_client_handles;
    ezs_rsp_p_cyspp_get_client_handles_t rsp_p_cyspp_get_client_handles;
    ezs_cmd_p_cyspp_set_packetization_t cmd_p_cyspp_set_packetization;
    ezs_rsp_p_cyspp_set_packetization_t rsp_p_cyspp_set_packetization;
    ezs_cmd_p_cyspp_get_packetization_t cmd_p_cyspp_get_packetization;
    ezs_rsp_p_cyspp_get_packetization_t rsp_p_cyspp_get_packetization;
    ezs_evt_p_cyspp_status_t evt_p_cyspp_status;
    ezs_cmd_p_cycommand_set_parameters_t cmd_p_cycommand_set_parameters;
    ezs_rsp_p_cycommand_set_parameters_t rsp_p_cycommand_set_parameters;
    ezs_cmd_p_cycommand_get_parameters_t cmd_p_cycommand_get_parameters;
    ezs_rsp_p_cycommand_get_parameters_t rsp_p_cycommand_get_parameters;
    ezs_evt_p_cycommand_status_t evt_p_cycommand_status;
    ezs_cmd_p_ibeacon_set_parameters_t cmd_p_ibeacon_set_parameters;
    ezs_rsp_p_ibeacon_set_parameters_t rsp_p_ibeacon_set_parameters;
    ezs_cmd_p_ibeacon_get_parameters_t cmd_p_ibeacon_get_parameters;
    ezs_rsp_p_ibeacon_get_parameters_t rsp_p_ibeacon_get_parameters;
    ezs_cmd_p_eddystone_set_parameters_t cmd_p_eddystone_set_parameters;
    ezs_rsp_p_eddystone_set_parameters_t rsp_p_eddystone_set_parameters;
    ezs_cmd_p_eddystone_get_parameters_t cmd_p_eddystone_get_parameters;
    ezs_rsp_p_eddystone_get_parameters_t rsp_p_eddystone_get_parameters;
} ezs_packet_payload_t;


/*******************************************************************************
* Complete packet, made up of a packet header and a packet payload. The header
* structure is in a union with a 32-bit unsigned integer, to allow either
* structured or unstructured access to the 4-byte header. The packet also
* includes a single checksum byte, a value calculated by starting with the
* value 0x99 and adding the value of every byte in the header and payload in
* sequence. The checksum byte is not included in the payload length value in
* the packet header.
*
* This structure also includes metadata values storing the packet type, index
* in the relative command/event table (for quick identification during
* processing), and a pointer to the command/event table entry.
*******************************************************************************/
__PACKDEF(ezs_packet_t,
{
    union
    {
        ezs_packet_header_t header;
        uint32_t int_header;
    };
    ezs_packet_payload_t payload;
    ezs_packet_type_t packet_type;
    uint16_t tbl_index;
    union
    {
        ezs_tbl_cmd_entry_t *cmd_entry;
        ezs_tbl_evt_entry_t *evt_entry;
    };
});

void                EZSerial_Init(
                        void (*handler)(ezs_packet_t *packet),
                        ezs_output_result_t (*output)(uint16_t length, const uint8_t *data),
                        ezs_input_result_t (*input)(uint8_t *data, uint16_t timeout));
ezs_input_result_t  EZSerial_Parse(uint8_t b);
ezs_input_result_t  EZSerial_FillPacketMetaFromBinary(ezs_packet_t *packet);
ezs_output_result_t EZSerial_SendPacket(ezs_packet_t *packet);
ezs_packet_t *      EZSerial_WaitForPacket(ezs_packet_type_t type, uint16_t timeout);

ezs_output_result_t ezs_cmd_va(uint16_t index, uint8_t memory, ...);

#define ezs_cmd_protocol_set_parse_mode(mode) \
    ezs_cmd_va(EZS_IDX_CMD_PROTOCOL_SET_PARSE_MODE, 0, mode)
#define ezs_fcmd_protocol_set_parse_mode(mode) \
    ezs_cmd_va(EZS_IDX_CMD_PROTOCOL_SET_PARSE_MODE, 1, mode)
#define ezs_cmd_protocol_get_parse_mode() \
    ezs_cmd_va(EZS_IDX_CMD_PROTOCOL_GET_PARSE_MODE, 0)
#define ezs_fcmd_protocol_get_parse_mode() \
    ezs_cmd_va(EZS_IDX_CMD_PROTOCOL_GET_PARSE_MODE, 1)
#define ezs_cmd_protocol_set_echo_mode(mode) \
    ezs_cmd_va(EZS_IDX_CMD_PROTOCOL_SET_ECHO_MODE, 0, mode)
#define ezs_fcmd_protocol_set_echo_mode(mode) \
    ezs_cmd_va(EZS_IDX_CMD_PROTOCOL_SET_ECHO_MODE, 1, mode)
#define ezs_cmd_protocol_get_echo_mode() \
    ezs_cmd_va(EZS_IDX_CMD_PROTOCOL_GET_ECHO_MODE, 0)
#define ezs_fcmd_protocol_get_echo_mode() \
    ezs_cmd_va(EZS_IDX_CMD_PROTOCOL_GET_ECHO_MODE, 1)
#define ezs_cmd_system_ping() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_PING, 0)
#define ezs_cmd_system_reboot() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_REBOOT, 0)
#define ezs_cmd_system_dump(type) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_DUMP, 0, type)
#define ezs_cmd_system_store_config() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_STORE_CONFIG, 0)
#define ezs_cmd_system_factory_reset() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_FACTORY_RESET, 0)
#define ezs_cmd_system_query_firmware_version() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_QUERY_FIRMWARE_VERSION, 0)
#define ezs_cmd_system_query_unique_id() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_QUERY_UNIQUE_ID, 0)
#define ezs_cmd_system_query_random_number() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_QUERY_RANDOM_NUMBER, 0)
#define ezs_cmd_system_aes_encrypt(in_struct) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_AES_ENCRYPT, 0, in_struct)
#define ezs_cmd_system_aes_decrypt(in_struct) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_AES_DECRYPT, 0, in_struct)
#define ezs_cmd_system_write_user_data(offset, data) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_WRITE_USER_DATA, 0, offset, data)
#define ezs_cmd_system_read_user_data(offset, length) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_READ_USER_DATA, 0, offset, length)
#define ezs_cmd_system_set_bluetooth_address(address) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_BLUETOOTH_ADDRESS, 0, address)
#define ezs_fcmd_system_set_bluetooth_address(address) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_BLUETOOTH_ADDRESS, 1, address)
#define ezs_cmd_system_get_bluetooth_address() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_BLUETOOTH_ADDRESS, 0)
#define ezs_fcmd_system_get_bluetooth_address() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_BLUETOOTH_ADDRESS, 1)
#define ezs_cmd_system_set_eco_parameters(trim) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_ECO_PARAMETERS, 0, trim)
#define ezs_fcmd_system_set_eco_parameters(trim) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_ECO_PARAMETERS, 1, trim)
#define ezs_cmd_system_get_eco_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_ECO_PARAMETERS, 0)
#define ezs_fcmd_system_get_eco_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_ECO_PARAMETERS, 1)
#define ezs_cmd_system_set_wco_parameters(accuracy) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_WCO_PARAMETERS, 0, accuracy)
#define ezs_fcmd_system_set_wco_parameters(accuracy) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_WCO_PARAMETERS, 1, accuracy)
#define ezs_cmd_system_get_wco_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_WCO_PARAMETERS, 0)
#define ezs_fcmd_system_get_wco_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_WCO_PARAMETERS, 1)
#define ezs_cmd_system_set_sleep_parameters(level) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_SLEEP_PARAMETERS, 0, level)
#define ezs_fcmd_system_set_sleep_parameters(level) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_SLEEP_PARAMETERS, 1, level)
#define ezs_cmd_system_get_sleep_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_SLEEP_PARAMETERS, 0)
#define ezs_fcmd_system_get_sleep_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_SLEEP_PARAMETERS, 1)
#define ezs_cmd_system_set_tx_power(power) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_TX_POWER, 0, power)
#define ezs_fcmd_system_set_tx_power(power) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_TX_POWER, 1, power)
#define ezs_cmd_system_get_tx_power() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_TX_POWER, 0)
#define ezs_fcmd_system_get_tx_power() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_TX_POWER, 1)
#define ezs_cmd_system_set_transport(interface) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_TRANSPORT, 0, interface)
#define ezs_fcmd_system_set_transport(interface) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_TRANSPORT, 1, interface)
#define ezs_cmd_system_get_transport() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_TRANSPORT, 0)
#define ezs_fcmd_system_get_transport() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_TRANSPORT, 1)
#define ezs_cmd_system_set_uart_parameters(baud, autobaud, autocorrect, flow, databits, parity, stopbits) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_UART_PARAMETERS, 0, baud, autobaud, autocorrect, flow, databits, parity, stopbits)
#define ezs_fcmd_system_set_uart_parameters(baud, autobaud, autocorrect, flow, databits, parity, stopbits) \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_SET_UART_PARAMETERS, 1, baud, autobaud, autocorrect, flow, databits, parity, stopbits)
#define ezs_cmd_system_get_uart_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_UART_PARAMETERS, 0)
#define ezs_fcmd_system_get_uart_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SYSTEM_GET_UART_PARAMETERS, 1)
#define ezs_cmd_dfu_reboot(mode) \
    ezs_cmd_va(EZS_IDX_CMD_DFU_REBOOT, 0, mode)
#define ezs_cmd_gap_connect(address, type, interval, slave_latency, supervision_timeout, scan_interval, scan_window, scan_timeout) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_CONNECT, 0, address, type, interval, slave_latency, supervision_timeout, scan_interval, scan_window, scan_timeout)
#define ezs_cmd_gap_cancel_connection() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_CANCEL_CONNECTION, 0)
#define ezs_cmd_gap_update_conn_parameters(conn_handle, interval, slave_latency, supervision_timeout) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_UPDATE_CONN_PARAMETERS, 0, conn_handle, interval, slave_latency, supervision_timeout)
#define ezs_cmd_gap_send_connupdate_response(conn_handle, response) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SEND_CONNUPDATE_RESPONSE, 0, conn_handle, response)
#define ezs_cmd_gap_disconnect(conn_handle) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_DISCONNECT, 0, conn_handle)
#define ezs_cmd_gap_add_whitelist_entry(address, type) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_ADD_WHITELIST_ENTRY, 0, address, type)
#define ezs_cmd_gap_delete_whitelist_entry(address, type) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_DELETE_WHITELIST_ENTRY, 0, address, type)
#define ezs_cmd_gap_start_adv(mode, type, interval, channels, filter, timeout) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_START_ADV, 0, mode, type, interval, channels, filter, timeout)
#define ezs_cmd_gap_stop_adv() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_STOP_ADV, 0)
#define ezs_cmd_gap_start_scan(mode, interval, window, active, filter, nodupe, timeout) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_START_SCAN, 0, mode, interval, window, active, filter, nodupe, timeout)
#define ezs_cmd_gap_stop_scan() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_STOP_SCAN, 0)
#define ezs_cmd_gap_query_peer_address(conn_handle) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_QUERY_PEER_ADDRESS, 0, conn_handle)
#define ezs_cmd_gap_query_rssi(conn_handle) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_QUERY_RSSI, 0, conn_handle)
#define ezs_cmd_gap_query_whitelist() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_QUERY_WHITELIST, 0)
#define ezs_cmd_gap_set_device_name(name) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_DEVICE_NAME, 0, name)
#define ezs_fcmd_gap_set_device_name(name) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_DEVICE_NAME, 1, name)
#define ezs_cmd_gap_get_device_name() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_DEVICE_NAME, 0)
#define ezs_fcmd_gap_get_device_name() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_DEVICE_NAME, 1)
#define ezs_cmd_gap_set_device_appearance(appearance) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_DEVICE_APPEARANCE, 0, appearance)
#define ezs_fcmd_gap_set_device_appearance(appearance) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_DEVICE_APPEARANCE, 1, appearance)
#define ezs_cmd_gap_get_device_appearance() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_DEVICE_APPEARANCE, 0)
#define ezs_fcmd_gap_get_device_appearance() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_DEVICE_APPEARANCE, 1)
#define ezs_cmd_gap_set_adv_data(data) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_ADV_DATA, 0, data)
#define ezs_fcmd_gap_set_adv_data(data) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_ADV_DATA, 1, data)
#define ezs_cmd_gap_get_adv_data() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_ADV_DATA, 0)
#define ezs_fcmd_gap_get_adv_data() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_ADV_DATA, 1)
#define ezs_cmd_gap_set_sr_data(data) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_SR_DATA, 0, data)
#define ezs_fcmd_gap_set_sr_data(data) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_SR_DATA, 1, data)
#define ezs_cmd_gap_get_sr_data() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_SR_DATA, 0)
#define ezs_fcmd_gap_get_sr_data() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_SR_DATA, 1)
#define ezs_cmd_gap_set_adv_parameters(mode, type, interval, channels, filter, timeout, flags) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_ADV_PARAMETERS, 0, mode, type, interval, channels, filter, timeout, flags)
#define ezs_fcmd_gap_set_adv_parameters(mode, type, interval, channels, filter, timeout, flags) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_ADV_PARAMETERS, 1, mode, type, interval, channels, filter, timeout, flags)
#define ezs_cmd_gap_get_adv_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_ADV_PARAMETERS, 0)
#define ezs_fcmd_gap_get_adv_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_ADV_PARAMETERS, 1)
#define ezs_cmd_gap_set_scan_parameters(mode, interval, window, active, filter, nodupe, timeout) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_SCAN_PARAMETERS, 0, mode, interval, window, active, filter, nodupe, timeout)
#define ezs_fcmd_gap_set_scan_parameters(mode, interval, window, active, filter, nodupe, timeout) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_SCAN_PARAMETERS, 1, mode, interval, window, active, filter, nodupe, timeout)
#define ezs_cmd_gap_get_scan_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_SCAN_PARAMETERS, 0)
#define ezs_fcmd_gap_get_scan_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_SCAN_PARAMETERS, 1)
#define ezs_cmd_gap_set_conn_parameters(interval, slave_latency, supervision_timeout, scan_interval, scan_window, scan_timeout) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_CONN_PARAMETERS, 0, interval, slave_latency, supervision_timeout, scan_interval, scan_window, scan_timeout)
#define ezs_fcmd_gap_set_conn_parameters(interval, slave_latency, supervision_timeout, scan_interval, scan_window, scan_timeout) \
    ezs_cmd_va(EZS_IDX_CMD_GAP_SET_CONN_PARAMETERS, 1, interval, slave_latency, supervision_timeout, scan_interval, scan_window, scan_timeout)
#define ezs_cmd_gap_get_conn_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_CONN_PARAMETERS, 0)
#define ezs_fcmd_gap_get_conn_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GAP_GET_CONN_PARAMETERS, 1)
#define ezs_cmd_gatts_create_attr(type, read_permissions, write_permissions, char_properties, length, data) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_CREATE_ATTR, 0, type, read_permissions, write_permissions, char_properties, length, data)
#define ezs_cmd_gatts_delete_attr(attr_handle) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_DELETE_ATTR, 0, attr_handle)
#define ezs_cmd_gatts_validate_db() \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_VALIDATE_DB, 0)
#define ezs_cmd_gatts_store_db() \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_STORE_DB, 0)
#define ezs_cmd_gatts_dump_db(include_fixed) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_DUMP_DB, 0, include_fixed)
#define ezs_cmd_gatts_discover_services(begin, end) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_DISCOVER_SERVICES, 0, begin, end)
#define ezs_cmd_gatts_discover_characteristics(begin, end, service) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_DISCOVER_CHARACTERISTICS, 0, begin, end, service)
#define ezs_cmd_gatts_discover_descriptors(begin, end, service, characteristic) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_DISCOVER_DESCRIPTORS, 0, begin, end, service, characteristic)
#define ezs_cmd_gatts_read_handle(attr_handle) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_READ_HANDLE, 0, attr_handle)
#define ezs_cmd_gatts_write_handle(attr_handle, data) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_WRITE_HANDLE, 0, attr_handle, data)
#define ezs_cmd_gatts_notify_handle(conn_handle, attr_handle, data) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_NOTIFY_HANDLE, 0, conn_handle, attr_handle, data)
#define ezs_cmd_gatts_indicate_handle(conn_handle, attr_handle, data) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_INDICATE_HANDLE, 0, conn_handle, attr_handle, data)
#define ezs_cmd_gatts_send_writereq_response(conn_handle, response) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_SEND_WRITEREQ_RESPONSE, 0, conn_handle, response)
#define ezs_cmd_gatts_set_parameters(flags) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_SET_PARAMETERS, 0, flags)
#define ezs_fcmd_gatts_set_parameters(flags) \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_SET_PARAMETERS, 1, flags)
#define ezs_cmd_gatts_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_GET_PARAMETERS, 0)
#define ezs_fcmd_gatts_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GATTS_GET_PARAMETERS, 1)
#define ezs_cmd_gattc_discover_services(conn_handle, begin, end) \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_DISCOVER_SERVICES, 0, conn_handle, begin, end)
#define ezs_cmd_gattc_discover_characteristics(conn_handle, begin, end, service) \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_DISCOVER_CHARACTERISTICS, 0, conn_handle, begin, end, service)
#define ezs_cmd_gattc_discover_descriptors(conn_handle, begin, end, service, characteristic) \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_DISCOVER_DESCRIPTORS, 0, conn_handle, begin, end, service, characteristic)
#define ezs_cmd_gattc_read_handle(conn_handle, attr_handle) \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_READ_HANDLE, 0, conn_handle, attr_handle)
#define ezs_cmd_gattc_write_handle(conn_handle, attr_handle, type, data) \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_WRITE_HANDLE, 0, conn_handle, attr_handle, type, data)
#define ezs_cmd_gattc_confirm_indication(conn_handle) \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_CONFIRM_INDICATION, 0, conn_handle)
#define ezs_cmd_gattc_set_parameters(flags) \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_SET_PARAMETERS, 0, flags)
#define ezs_fcmd_gattc_set_parameters(flags) \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_SET_PARAMETERS, 1, flags)
#define ezs_cmd_gattc_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_GET_PARAMETERS, 0)
#define ezs_fcmd_gattc_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_GATTC_GET_PARAMETERS, 1)
#define ezs_cmd_smp_query_bonds() \
    ezs_cmd_va(EZS_IDX_CMD_SMP_QUERY_BONDS, 0)
#define ezs_cmd_smp_delete_bond(address, type) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_DELETE_BOND, 0, address, type)
#define ezs_cmd_smp_pair(conn_handle, mode, bonding, keysize, pairprop) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_PAIR, 0, conn_handle, mode, bonding, keysize, pairprop)
#define ezs_cmd_smp_query_random_address() \
    ezs_cmd_va(EZS_IDX_CMD_SMP_QUERY_RANDOM_ADDRESS, 0)
#define ezs_cmd_smp_send_pairreq_response(conn_handle, response) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_SEND_PAIRREQ_RESPONSE, 0, conn_handle, response)
#define ezs_cmd_smp_send_passkeyreq_response(conn_handle, passkey) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_SEND_PASSKEYREQ_RESPONSE, 0, conn_handle, passkey)
#define ezs_cmd_smp_generate_oob_data(conn_handle, key) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_GENERATE_OOB_DATA, 0, conn_handle, key)
#define ezs_cmd_smp_clear_oob_data(conn_handle) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_CLEAR_OOB_DATA, 0, conn_handle)
#define ezs_cmd_smp_set_privacy_mode(mode, interval) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_SET_PRIVACY_MODE, 0, mode, interval)
#define ezs_fcmd_smp_set_privacy_mode(mode, interval) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_SET_PRIVACY_MODE, 1, mode, interval)
#define ezs_cmd_smp_get_privacy_mode() \
    ezs_cmd_va(EZS_IDX_CMD_SMP_GET_PRIVACY_MODE, 0)
#define ezs_fcmd_smp_get_privacy_mode() \
    ezs_cmd_va(EZS_IDX_CMD_SMP_GET_PRIVACY_MODE, 1)
#define ezs_cmd_smp_set_security_parameters(mode, bonding, keysize, pairprop, io, flags) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_SET_SECURITY_PARAMETERS, 0, mode, bonding, keysize, pairprop, io, flags)
#define ezs_fcmd_smp_set_security_parameters(mode, bonding, keysize, pairprop, io, flags) \
    ezs_cmd_va(EZS_IDX_CMD_SMP_SET_SECURITY_PARAMETERS, 1, mode, bonding, keysize, pairprop, io, flags)
#define ezs_cmd_smp_get_security_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SMP_GET_SECURITY_PARAMETERS, 0)
#define ezs_fcmd_smp_get_security_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_SMP_GET_SECURITY_PARAMETERS, 1)
#define ezs_cmd_l2cap_connect(conn_handle, remote, local, mtu, mps, credits) \
    ezs_cmd_va(EZS_IDX_CMD_L2CAP_CONNECT, 0, conn_handle, remote, local, mtu, mps, credits)
#define ezs_cmd_l2cap_disconnect(channel) \
    ezs_cmd_va(EZS_IDX_CMD_L2CAP_DISCONNECT, 0, channel)
#define ezs_cmd_l2cap_register_psm(channel, watermark) \
    ezs_cmd_va(EZS_IDX_CMD_L2CAP_REGISTER_PSM, 0, channel, watermark)
#define ezs_cmd_l2cap_send_connreq_response(conn_handle, channel, response, mtu, mps, credits) \
    ezs_cmd_va(EZS_IDX_CMD_L2CAP_SEND_CONNREQ_RESPONSE, 0, conn_handle, channel, response, mtu, mps, credits)
#define ezs_cmd_l2cap_send_credits(channel, credits) \
    ezs_cmd_va(EZS_IDX_CMD_L2CAP_SEND_CREDITS, 0, channel, credits)
#define ezs_cmd_l2cap_send_data(conn_handle, channel, data) \
    ezs_cmd_va(EZS_IDX_CMD_L2CAP_SEND_DATA, 0, conn_handle, channel, data)
#define ezs_cmd_gpio_query_logic(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_QUERY_LOGIC, 0, port)
#define ezs_cmd_gpio_query_adc(channel, reference) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_QUERY_ADC, 0, channel, reference)
#define ezs_cmd_gpio_set_function(port, mask, enable, drive) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_FUNCTION, 0, port, mask, enable, drive)
#define ezs_fcmd_gpio_set_function(port, mask, enable, drive) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_FUNCTION, 1, port, mask, enable, drive)
#define ezs_cmd_gpio_get_function(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_FUNCTION, 0, port)
#define ezs_fcmd_gpio_get_function(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_FUNCTION, 1, port)
#define ezs_cmd_gpio_set_drive(port, mask, direction, pulldrive_down, pulldrive_up, analog) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_DRIVE, 0, port, mask, direction, pulldrive_down, pulldrive_up, analog)
#define ezs_fcmd_gpio_set_drive(port, mask, direction, pulldrive_down, pulldrive_up, analog) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_DRIVE, 1, port, mask, direction, pulldrive_down, pulldrive_up, analog)
#define ezs_cmd_gpio_get_drive(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_DRIVE, 0, port)
#define ezs_fcmd_gpio_get_drive(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_DRIVE, 1, port)
#define ezs_cmd_gpio_set_logic(port, mask, logic) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_LOGIC, 0, port, mask, logic)
#define ezs_fcmd_gpio_set_logic(port, mask, logic) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_LOGIC, 1, port, mask, logic)
#define ezs_cmd_gpio_get_logic(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_LOGIC, 0, port)
#define ezs_fcmd_gpio_get_logic(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_LOGIC, 1, port)
#define ezs_cmd_gpio_set_interrupt_mode(port, mask, rising, falling) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_INTERRUPT_MODE, 0, port, mask, rising, falling)
#define ezs_fcmd_gpio_set_interrupt_mode(port, mask, rising, falling) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_INTERRUPT_MODE, 1, port, mask, rising, falling)
#define ezs_cmd_gpio_get_interrupt_mode(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_INTERRUPT_MODE, 0, port)
#define ezs_fcmd_gpio_get_interrupt_mode(port) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_INTERRUPT_MODE, 1, port)
#define ezs_cmd_gpio_set_pwm_mode(channel, enable, divider, prescaler, period, compare) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_PWM_MODE, 0, channel, enable, divider, prescaler, period, compare)
#define ezs_fcmd_gpio_set_pwm_mode(channel, enable, divider, prescaler, period, compare) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_SET_PWM_MODE, 1, channel, enable, divider, prescaler, period, compare)
#define ezs_cmd_gpio_get_pwm_mode(channel) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_PWM_MODE, 0, channel)
#define ezs_fcmd_gpio_get_pwm_mode(channel) \
    ezs_cmd_va(EZS_IDX_CMD_GPIO_GET_PWM_MODE, 1, channel)
#define ezs_cmd_p_cyspp_check() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_CHECK, 0)
#define ezs_cmd_p_cyspp_start() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_START, 0)
#define ezs_cmd_p_cyspp_set_parameters(enable, role, company, local_key, remote_key, remote_mask, sleep_level, server_security, client_flags) \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_SET_PARAMETERS, 0, enable, role, company, local_key, remote_key, remote_mask, sleep_level, server_security, client_flags)
#define ezs_fcmd_p_cyspp_set_parameters(enable, role, company, local_key, remote_key, remote_mask, sleep_level, server_security, client_flags) \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_SET_PARAMETERS, 1, enable, role, company, local_key, remote_key, remote_mask, sleep_level, server_security, client_flags)
#define ezs_cmd_p_cyspp_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_GET_PARAMETERS, 0)
#define ezs_fcmd_p_cyspp_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_GET_PARAMETERS, 1)
#define ezs_cmd_p_cyspp_set_client_handles(data_value_handle, data_cccd_handle, rxflow_value_handle, rxflow_cccd_handle) \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_SET_CLIENT_HANDLES, 0, data_value_handle, data_cccd_handle, rxflow_value_handle, rxflow_cccd_handle)
#define ezs_fcmd_p_cyspp_set_client_handles(data_value_handle, data_cccd_handle, rxflow_value_handle, rxflow_cccd_handle) \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_SET_CLIENT_HANDLES, 1, data_value_handle, data_cccd_handle, rxflow_value_handle, rxflow_cccd_handle)
#define ezs_cmd_p_cyspp_get_client_handles() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_GET_CLIENT_HANDLES, 0)
#define ezs_fcmd_p_cyspp_get_client_handles() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_GET_CLIENT_HANDLES, 1)
#define ezs_cmd_p_cyspp_set_packetization(mode, wait, length, eop) \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_SET_PACKETIZATION, 0, mode, wait, length, eop)
#define ezs_fcmd_p_cyspp_set_packetization(mode, wait, length, eop) \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_SET_PACKETIZATION, 1, mode, wait, length, eop)
#define ezs_cmd_p_cyspp_get_packetization() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_GET_PACKETIZATION, 0)
#define ezs_fcmd_p_cyspp_get_packetization() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYSPP_GET_PACKETIZATION, 1)
#define ezs_cmd_p_cycommand_set_parameters(enable, hostout, timeout, safemode, challenge, security, secret) \
    ezs_cmd_va(EZS_IDX_CMD_P_CYCOMMAND_SET_PARAMETERS, 0, enable, hostout, timeout, safemode, challenge, security, secret)
#define ezs_fcmd_p_cycommand_set_parameters(enable, hostout, timeout, safemode, challenge, security, secret) \
    ezs_cmd_va(EZS_IDX_CMD_P_CYCOMMAND_SET_PARAMETERS, 1, enable, hostout, timeout, safemode, challenge, security, secret)
#define ezs_cmd_p_cycommand_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYCOMMAND_GET_PARAMETERS, 0)
#define ezs_fcmd_p_cycommand_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_P_CYCOMMAND_GET_PARAMETERS, 1)
#define ezs_cmd_p_ibeacon_set_parameters(enable, interval, company, major, minor, uuid) \
    ezs_cmd_va(EZS_IDX_CMD_P_IBEACON_SET_PARAMETERS, 0, enable, interval, company, major, minor, uuid)
#define ezs_fcmd_p_ibeacon_set_parameters(enable, interval, company, major, minor, uuid) \
    ezs_cmd_va(EZS_IDX_CMD_P_IBEACON_SET_PARAMETERS, 1, enable, interval, company, major, minor, uuid)
#define ezs_cmd_p_ibeacon_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_P_IBEACON_GET_PARAMETERS, 0)
#define ezs_fcmd_p_ibeacon_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_P_IBEACON_GET_PARAMETERS, 1)
#define ezs_cmd_p_eddystone_set_parameters(enable, interval, type, data) \
    ezs_cmd_va(EZS_IDX_CMD_P_EDDYSTONE_SET_PARAMETERS, 0, enable, interval, type, data)
#define ezs_fcmd_p_eddystone_set_parameters(enable, interval, type, data) \
    ezs_cmd_va(EZS_IDX_CMD_P_EDDYSTONE_SET_PARAMETERS, 1, enable, interval, type, data)
#define ezs_cmd_p_eddystone_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_P_EDDYSTONE_GET_PARAMETERS, 0)
#define ezs_fcmd_p_eddystone_get_parameters() \
    ezs_cmd_va(EZS_IDX_CMD_P_EDDYSTONE_GET_PARAMETERS, 1)

/******************************************************************************/
/***              Arduino-specific platform implementations                 ***/
/******************************************************************************/

class EZSLib
{
    public:
        void initialize(Stream *obj);
        void appHandler(ezs_packet_t *packet);
        ezs_output_result_t appOutput(uint16_t length, const uint8_t *data);
        ezs_input_result_t appInput(uint8_t *data, uint16_t timeout);
        
    private:
        Stream *_module;
        uint8_t _pending_response;
        uint8_t _initialized;
        uint32_t _timeout_start_ref;
};

extern void ezsHandler(ezs_packet_t *packet) __attribute__((weak));
extern EZSLib EZSerial;

#endif /* EZSLIB_H */

/* [] END OF FILE */
